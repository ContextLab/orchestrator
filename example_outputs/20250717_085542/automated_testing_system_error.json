{
  "status": "error",
  "error": "Failed to compile YAML: Failed to render template '<AUTO>analyze source code in {{source_dir}}:\n      1. Identify all functions, classes, and methods\n      2. Extract function signatures and parameters\n      3. Map dependencies and imports\n      4. Identify API endpoints if present\n      5. Detect design patterns used\n      6. Find complex logic areas\n      \n      Return comprehensive code structure analysis</AUTO>': 'source_dir' is undefined",
  "error_type": "YAMLCompilerError",
  "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 149, in process_value\n    return template.render(**context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 1304, in render\n    self.environment.handle_exception()\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 939, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"<template>\", line 1, in top-level template code\njinja2.exceptions.UndefinedError: 'source_dir' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 94, in compile\n    processed = self._process_templates(raw_pipeline, context or {})\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 179, in _process_templates\n    return process_value(pipeline_def)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 176, in process_value\n    return [process_value(item) for item in value]\n            ^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 170, in process_value\n    raise TemplateRenderError(\norchestrator.compiler.yaml_compiler.TemplateRenderError: Failed to render template '<AUTO>analyze source code in {{source_dir}}:\n      1. Identify all functions, classes, and methods\n      2. Extract function signatures and parameters\n      3. Map dependencies and imports\n      4. Identify API endpoints if present\n      5. Detect design patterns used\n      6. Find complex logic areas\n      \n      Return comprehensive code structure analysis</AUTO>': 'source_dir' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_comprehensive.py\", line 112, in test_all_examples\n    result = await self.orchestrator.execute_yaml(yaml_content, inputs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Failed to render template '<AUTO>analyze source code in {{source_dir}}:\n      1. Identify all functions, classes, and methods\n      2. Extract function signatures and parameters\n      3. Map dependencies and imports\n      4. Identify API endpoints if present\n      5. Detect design patterns used\n      6. Find complex logic areas\n      \n      Return comprehensive code structure analysis</AUTO>': 'source_dir' is undefined\n",
  "inputs": {
    "test_suite": "integration_tests",
    "environment": "staging",
    "coverage_threshold": 0.85,
    "frameworks": [
      "pytest",
      "jest"
    ],
    "parallel_execution": true
  },
  "timestamp": "2025-07-17T08:55:42.754967"
}