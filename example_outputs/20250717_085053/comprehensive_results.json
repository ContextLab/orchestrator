{
  "automated_testing_system.yaml": {
    "status": "error",
    "error": "Failed to compile YAML: Failed to render template '<AUTO>analyze source code in {{source_dir}}:\n      1. Identify all functions, classes, and methods\n      2. Extract function signatures and parameters\n      3. Map dependencies and imports\n      4. Identify API endpoints if present\n      5. Detect design patterns used\n      6. Find complex logic areas\n      \n      Return comprehensive code structure analysis</AUTO>': 'source_dir' is undefined",
    "error_type": "YAMLCompilerError",
    "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 149, in process_value\n    return template.render(**context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 1304, in render\n    self.environment.handle_exception()\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 939, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"<template>\", line 1, in top-level template code\njinja2.exceptions.UndefinedError: 'source_dir' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 94, in compile\n    processed = self._process_templates(raw_pipeline, context or {})\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 179, in _process_templates\n    return process_value(pipeline_def)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 176, in process_value\n    return [process_value(item) for item in value]\n            ^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 170, in process_value\n    raise TemplateRenderError(\norchestrator.compiler.yaml_compiler.TemplateRenderError: Failed to render template '<AUTO>analyze source code in {{source_dir}}:\n      1. Identify all functions, classes, and methods\n      2. Extract function signatures and parameters\n      3. Map dependencies and imports\n      4. Identify API endpoints if present\n      5. Detect design patterns used\n      6. Find complex logic areas\n      \n      Return comprehensive code structure analysis</AUTO>': 'source_dir' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_comprehensive.py\", line 112, in test_all_examples\n    result = await self.orchestrator.execute_yaml(yaml_content, inputs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Failed to render template '<AUTO>analyze source code in {{source_dir}}:\n      1. Identify all functions, classes, and methods\n      2. Extract function signatures and parameters\n      3. Map dependencies and imports\n      4. Identify API endpoints if present\n      5. Detect design patterns used\n      6. Find complex logic areas\n      \n      Return comprehensive code structure analysis</AUTO>': 'source_dir' is undefined\n",
    "inputs": {
      "test_suite": "integration_tests",
      "environment": "staging",
      "coverage_threshold": 0.85,
      "frameworks": [
        "pytest",
        "jest"
      ],
      "parallel_execution": true
    },
    "timestamp": "2025-07-17T08:50:53.918795"
  },
  "code_analysis_suite.yaml": {
    "status": "error",
    "error": "Failed to compile YAML: Failed to render template '{{doc_check}} == true': 'doc_check' is undefined",
    "error_type": "YAMLCompilerError",
    "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 149, in process_value\n    return template.render(**context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 1304, in render\n    self.environment.handle_exception()\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 939, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"<template>\", line 1, in top-level template code\njinja2.exceptions.UndefinedError: 'doc_check' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 94, in compile\n    processed = self._process_templates(raw_pipeline, context or {})\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 179, in _process_templates\n    return process_value(pipeline_def)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 176, in process_value\n    return [process_value(item) for item in value]\n            ^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 170, in process_value\n    raise TemplateRenderError(\norchestrator.compiler.yaml_compiler.TemplateRenderError: Failed to render template '{{doc_check}} == true': 'doc_check' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_comprehensive.py\", line 112, in test_all_examples\n    result = await self.orchestrator.execute_yaml(yaml_content, inputs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Failed to render template '{{doc_check}} == true': 'doc_check' is undefined\n",
    "inputs": {
      "repo_path": "/tmp/sample_project",
      "languages": [
        "python",
        "javascript"
      ],
      "analysis_depth": "comprehensive",
      "security_scan": true
    },
    "timestamp": "2025-07-17T08:50:53.937269"
  },
  "content_creation_pipeline.yaml": {
    "status": "error",
    "error": "Failed to compile YAML: Failed to render template ''blog' in {{formats}}': 'formats' is undefined",
    "error_type": "YAMLCompilerError",
    "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 149, in process_value\n    return template.render(**context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 1304, in render\n    self.environment.handle_exception()\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 939, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"<template>\", line 1, in top-level template code\njinja2.exceptions.UndefinedError: 'formats' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 94, in compile\n    processed = self._process_templates(raw_pipeline, context or {})\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 179, in _process_templates\n    return process_value(pipeline_def)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 176, in process_value\n    return [process_value(item) for item in value]\n            ^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 170, in process_value\n    raise TemplateRenderError(\norchestrator.compiler.yaml_compiler.TemplateRenderError: Failed to render template ''blog' in {{formats}}': 'formats' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_comprehensive.py\", line 112, in test_all_examples\n    result = await self.orchestrator.execute_yaml(yaml_content, inputs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Failed to render template ''blog' in {{formats}}': 'formats' is undefined\n",
    "inputs": {
      "topic": "sustainable technology trends",
      "content_types": [
        "blog_post",
        "social_media",
        "infographic"
      ],
      "target_audience": "technology professionals",
      "tone": "professional"
    },
    "timestamp": "2025-07-17T08:50:53.950107"
  },
  "creative_writing_assistant.yaml": {
    "status": "error",
    "error": "Failed to compile YAML: Failed to render template '{{include_worldbuilding}} == true and {{genre}} in ['fantasy', 'sci-fi', 'dystopian']': 'include_worldbuilding' is undefined",
    "error_type": "YAMLCompilerError",
    "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 149, in process_value\n    return template.render(**context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 1304, in render\n    self.environment.handle_exception()\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 939, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"<template>\", line 1, in top-level template code\njinja2.exceptions.UndefinedError: 'include_worldbuilding' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 94, in compile\n    processed = self._process_templates(raw_pipeline, context or {})\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 179, in _process_templates\n    return process_value(pipeline_def)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 176, in process_value\n    return [process_value(item) for item in value]\n            ^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 170, in process_value\n    raise TemplateRenderError(\norchestrator.compiler.yaml_compiler.TemplateRenderError: Failed to render template '{{include_worldbuilding}} == true and {{genre}} in ['fantasy', 'sci-fi', 'dystopian']': 'include_worldbuilding' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_comprehensive.py\", line 112, in test_all_examples\n    result = await self.orchestrator.execute_yaml(yaml_content, inputs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Failed to render template '{{include_worldbuilding}} == true and {{genre}} in ['fantasy', 'sci-fi', 'dystopian']': 'include_worldbuilding' is undefined\n",
    "inputs": {
      "genre": "science fiction",
      "length": "short_story",
      "writing_style": "literary",
      "target_audience": "adult readers",
      "initial_premise": "A scientist discovers parallel universes through quantum computing",
      "chapter_count": 3
    },
    "timestamp": "2025-07-17T08:50:53.962795"
  },
  "customer_support_automation.yaml": {
    "status": "success",
    "execution_time": 53.906237,
    "inputs": {
      "ticket_id": "TICKET-2024-001",
      "ticketing_system": "zendesk",
      "auto_respond": true,
      "languages": [
        "en",
        "es"
      ],
      "escalation_threshold": -0.3
    },
    "outputs": {},
    "step_results": {
      "receive_ticket": "It seems like you might be confirming something or responding to a statement. Could you please provide more context or clarify what you're referring to? I'm here to help!",
      "detect_language": "It looks like you've entered a placeholder for detected language. If you need assistance with a specific language or topic, please let me know!",
      "analyze_sentiment": "Sentiment analysis is a natural language processing (NLP) technique used to determine the emotional tone behind a series of words. It is commonly applied to understand opinions, sentiments, or attitudes expressed in text data, such as social media posts, reviews, or customer feedback. The goal is to classify the text as positive, negative, or neutral, although more nuanced approaches can identify specific emotions (like joy, anger, sadness, etc.).\n\n### Key Concepts:\n\n1. **Lexicon-based Approaches**: These use predefined lists of words associated with positive or negative sentiments. For example, words like \"excellent\" or \"happy\" might score positively, while \"terrible\" or \"sad\" would score negatively.\n\n2. **Machine Learning Approaches**: This involves training algorithms on labeled datasets (text with known sentiments) to learn patterns. Common algorithms include:\n   - Logistic Regression\n   - Support Vector Machines (SVM)\n   - Naive Bayes\n   - Neural Networks\n\n3. **Deep Learning**: More advanced techniques using neural networks, particularly recurrent neural networks (RNNs) or transformers (like BERT), can capture context and nuances in language better than traditional methods.\n\n4. **Applications**: \n   - **Market Research**: Understanding consumer opinions about products or brands.\n   - **Social Media Monitoring**: Analyzing public sentiment around events or topics.\n   - **Customer Support**: Assessing customer feedback to improve services.\n   - **Political Analysis**: Gauging public sentiment toward political figures or policies.\n\n5. **Challenges**: \n   - **Sarcasm and Irony**: Detecting sarcasm can be difficult for algorithms.\n   - **Context Sensitivity**: The same word can have different meanings based on context.\n   - **Multilingual Sentiment**: Analyzing sentiment in multiple languages adds complexity.\n\n### Tools and Libraries:\n- **NLTK**: Natural Language Toolkit for Python, helpful for basic NLP tasks.\n- **VADER**: A lexicon and rule-based sentiment analysis tool specifically designed for social media text.\n- **TextBlob**: A simple library for processing textual data that provides a straightforward API for diving into common natural language processing (NLP) tasks.\n- **Transformers**: Hugging Face's library for state-of-the-art NLP models, including sentiment analysis.\n\nIf you have specific questions about sentiment analysis or need help with a particular aspect, feel free to ask!",
      "extract_entities": "It looks like you've entered \"10.\" Could you please provide more context or let me know how I can assist you with that?",
      "classify_ticket": "It seems like you might be confirming something or responding to a statement. Could you please provide more context or clarify what you're referring to? I'm here to help!",
      "search_knowledge_base": "It seems like you might be looking for solutions to a specific problem or topic, but I need more context to provide a meaningful response. Are you looking for solutions related to math, technology, personal issues, or something else? Please provide more details, and I'll be happy to help!",
      "check_automation_eligibility": "It looks like you entered \"10.\" Could you please provide more context or specify what you'd like to know or discuss about it?",
      "generate_response": "It seems like you may have made a statement without context. Could you please provide more details or specify what you would like to discuss?",
      "translate_response": "It seems like you entered a placeholder for translated text. Could you please provide the text you would like translated or specify your request? I'm here to help!",
      "update_ticket": "It seems like you might be looking for confirmation on something specific. Could you please provide more details or clarify what you need confirmation about?",
      "send_response": "It seems like you're asking for confirmation, but I need a bit more context to provide an accurate response. Could you please clarify what you would like confirmation about?",
      "assign_to_agent": "It looks like you mentioned \"agent.\" Could you provide more context or specify what you're looking for related to agents? Are you referring to a specific type of agent (like a software agent, real estate agent, or something else), or is there a particular topic you're interested in discussing?",
      "monitor_sla": "The term \"compliant\" generally refers to the act of conforming to a set of rules, standards, or regulations. It can be used in various contexts, such as:\n\n1. **Legal Compliance**: Adhering to laws and regulations set forth by governing bodies.\n2. **Corporate Compliance**: Following internal policies and procedures within an organization, including ethical standards and industry regulations.\n3. **Technical Compliance**: Ensuring that products, systems, or processes meet specific technical standards or specifications.\n4. **Personal Behavior**: Individuals may be described as compliant if they are agreeable and willing to follow requests or instructions from others.\n\nIf you have a specific context in mind for the term \"compliant,\" please provide more details!",
      "create_followup": "It seems like you might be looking for assistance with tasks, but could you please clarify what specific tasks or type of tasks you need help with? For example, are you looking for productivity tips, project management advice, or help with a specific topic? Let me know how I can assist you!",
      "log_analytics": "It seems like you might be responding to something specific. Could you provide more context or clarify what you're referring to? I'm here to help!"
    },
    "timestamp": "2025-07-17T08:50:53.963375"
  },
  "data_processing_workflow.yaml": {
    "status": "error",
    "error": "Failed to compile YAML: Failed to render template '<AUTO>discover all data sources matching pattern {{source}} and gather metadata including:\n      1. File/table names and sizes\n      2. Data formats and schemas\n      3. Creation/modification dates\n      4. Access permissions\n      Return list of valid sources with metadata</AUTO>': 'source' is undefined",
    "error_type": "YAMLCompilerError",
    "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 149, in process_value\n    return template.render(**context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 1304, in render\n    self.environment.handle_exception()\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 939, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"<template>\", line 1, in top-level template code\njinja2.exceptions.UndefinedError: 'source' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 94, in compile\n    processed = self._process_templates(raw_pipeline, context or {})\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 179, in _process_templates\n    return process_value(pipeline_def)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 176, in process_value\n    return [process_value(item) for item in value]\n            ^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 170, in process_value\n    raise TemplateRenderError(\norchestrator.compiler.yaml_compiler.TemplateRenderError: Failed to render template '<AUTO>discover all data sources matching pattern {{source}} and gather metadata including:\n      1. File/table names and sizes\n      2. Data formats and schemas\n      3. Creation/modification dates\n      4. Access permissions\n      Return list of valid sources with metadata</AUTO>': 'source' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_comprehensive.py\", line 112, in test_all_examples\n    result = await self.orchestrator.execute_yaml(yaml_content, inputs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Failed to render template '<AUTO>discover all data sources matching pattern {{source}} and gather metadata including:\n      1. File/table names and sizes\n      2. Data formats and schemas\n      3. Creation/modification dates\n      4. Access permissions\n      Return list of valid sources with metadata</AUTO>': 'source' is undefined\n",
    "inputs": {
      "data_source": "sample_dataset.csv",
      "processing_steps": [
        "clean",
        "validate",
        "transform"
      ],
      "output_format": "json",
      "quality_threshold": 0.9
    },
    "timestamp": "2025-07-17T08:51:47.878750"
  },
  "document_intelligence.yaml": {
    "status": "error",
    "error": "Failed to compile YAML: Failed to render template '<AUTO>save all outputs to {{output_dir}}:\n      Save:\n      1. Intelligence report ({{output_format}})\n      2. Extracted text files\n      3. Entity lists (CSV)\n      4. Summaries (markdown)\n      5. Knowledge graph (JSON and visualization)\n      6. Compliance report (PDF)\n      7. Table data (Excel)\n      8. Processing log\n      \n      Organize in folder structure:\n      - /reports\n      - /extracted_text\n      - /entities\n      - /summaries\n      - /data\n      - /visualizations\n      \n      Return output locations</AUTO>': 'output_format' is undefined",
    "error_type": "YAMLCompilerError",
    "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 149, in process_value\n    return template.render(**context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 1304, in render\n    self.environment.handle_exception()\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 939, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"<template>\", line 3, in top-level template code\njinja2.exceptions.UndefinedError: 'output_format' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 94, in compile\n    processed = self._process_templates(raw_pipeline, context or {})\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 179, in _process_templates\n    return process_value(pipeline_def)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 176, in process_value\n    return [process_value(item) for item in value]\n            ^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 170, in process_value\n    raise TemplateRenderError(\norchestrator.compiler.yaml_compiler.TemplateRenderError: Failed to render template '<AUTO>save all outputs to {{output_dir}}:\n      Save:\n      1. Intelligence report ({{output_format}})\n      2. Extracted text files\n      3. Entity lists (CSV)\n      4. Summaries (markdown)\n      5. Knowledge graph (JSON and visualization)\n      6. Compliance report (PDF)\n      7. Table data (Excel)\n      8. Processing log\n      \n      Organize in folder structure:\n      - /reports\n      - /extracted_text\n      - /entities\n      - /summaries\n      - /data\n      - /visualizations\n      \n      Return output locations</AUTO>': 'output_format' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_comprehensive.py\", line 112, in test_all_examples\n    result = await self.orchestrator.execute_yaml(yaml_content, inputs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Failed to render template '<AUTO>save all outputs to {{output_dir}}:\n      Save:\n      1. Intelligence report ({{output_format}})\n      2. Extracted text files\n      3. Entity lists (CSV)\n      4. Summaries (markdown)\n      5. Knowledge graph (JSON and visualization)\n      6. Compliance report (PDF)\n      7. Table data (Excel)\n      8. Processing log\n      \n      Organize in folder structure:\n      - /reports\n      - /extracted_text\n      - /entities\n      - /summaries\n      - /data\n      - /visualizations\n      \n      Return output locations</AUTO>': 'output_format' is undefined\n",
    "inputs": {
      "input_dir": "/tmp/sample_documents",
      "output_dir": "/tmp/processed_documents",
      "enable_ocr": true,
      "languages": [
        "en"
      ],
      "extract_tables": true,
      "build_knowledge_graph": true
    },
    "timestamp": "2025-07-17T08:51:47.906855"
  },
  "financial_analysis_bot.yaml": {
    "status": "error",
    "error": "Failed to compile YAML: Failed to render template '<AUTO>fetch market data for symbol {{item}}:\n      Timeframe: {{timeframe}}\n      \n      Collect:\n      1. Price data (OHLCV)\n      2. Volume statistics\n      3. Market cap and shares outstanding\n      4. Fundamental data (if equity)\n      5. Recent splits and dividends\n      6. Sector and industry info\n      \n      Use best available data source\n      Handle missing data appropriately\n      \n      Return complete market dataset</AUTO>': 'item' is undefined",
    "error_type": "YAMLCompilerError",
    "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 149, in process_value\n    return template.render(**context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 1304, in render\n    self.environment.handle_exception()\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 939, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"<template>\", line 1, in top-level template code\njinja2.exceptions.UndefinedError: 'item' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 94, in compile\n    processed = self._process_templates(raw_pipeline, context or {})\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 179, in _process_templates\n    return process_value(pipeline_def)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 176, in process_value\n    return [process_value(item) for item in value]\n            ^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 170, in process_value\n    raise TemplateRenderError(\norchestrator.compiler.yaml_compiler.TemplateRenderError: Failed to render template '<AUTO>fetch market data for symbol {{item}}:\n      Timeframe: {{timeframe}}\n      \n      Collect:\n      1. Price data (OHLCV)\n      2. Volume statistics\n      3. Market cap and shares outstanding\n      4. Fundamental data (if equity)\n      5. Recent splits and dividends\n      6. Sector and industry info\n      \n      Use best available data source\n      Handle missing data appropriately\n      \n      Return complete market dataset</AUTO>': 'item' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_comprehensive.py\", line 112, in test_all_examples\n    result = await self.orchestrator.execute_yaml(yaml_content, inputs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Failed to render template '<AUTO>fetch market data for symbol {{item}}:\n      Timeframe: {{timeframe}}\n      \n      Collect:\n      1. Price data (OHLCV)\n      2. Volume statistics\n      3. Market cap and shares outstanding\n      4. Fundamental data (if equity)\n      5. Recent splits and dividends\n      6. Sector and industry info\n      \n      Use best available data source\n      Handle missing data appropriately\n      \n      Return complete market dataset</AUTO>': 'item' is undefined\n",
    "inputs": {
      "symbols": [
        "AAPL",
        "GOOGL",
        "MSFT"
      ],
      "timeframe": "1y",
      "analysis_type": "comprehensive",
      "risk_tolerance": "moderate",
      "include_predictions": true,
      "run_backtest": false
    },
    "timestamp": "2025-07-17T08:51:47.916730"
  },
  "interactive_chat_bot.yaml": {
    "status": "success",
    "execution_time": 70.713847,
    "inputs": {
      "message": "I need help planning a sustainable technology conference",
      "conversation_id": "conv_2024_001",
      "persona": "helpful-assistant",
      "enable_streaming": false,
      "available_tools": [
        "web_search",
        "knowledge_base"
      ]
    },
    "outputs": {},
    "step_results": {
      "process_input": "Of course! What do you need help with?",
      "safety_check": "It seems like you might be referencing a specific term or phrase, but I need a bit more context to assist you effectively. Could you please provide more details or clarify what you mean by \"filtered_content\"? Are you looking for information about content filtering, a specific application, or something else?",
      "retrieve_context": "It seems like you might be looking for clarification or information about a specific topic, but \"context\" is quite broad. Could you please provide more details or specify what context you are referring to? This will help me assist you better!",
      "classify_intent": "Intent classification is a natural language processing (NLP) task that involves determining the intention behind a user's input, typically in the context of understanding commands or queries in applications such as chatbots, virtual assistants, or customer service systems. \n\n### Key Components of Intent Classification:\n\n1. **Input Data**: This can be a sentence or a phrase from the user, such as \"Book a flight to New York\" or \"What's the weather like today?\".\n\n2. **Intents**: These are the goals or purposes behind the user's input. For example:\n   - Booking a flight\n   - Checking the weather\n   - Making a reservation\n   - Asking for information\n\n3. **Training Data**: Machine learning models for intent classification require a labeled dataset that consists of numerous user inputs paired with their corresponding intents.\n\n4. **Feature Extraction**: This involves processing the input text to extract relevant features that can help in classification. This can include:\n   - Tokenization\n   - Vectorization (e.g., TF-IDF, word embeddings)\n\n5. **Classification Algorithms**: Various machine learning algorithms can be used for intent classification, including:\n   - Logistic Regression\n   - Support Vector Machines (SVM)\n   - Decision Trees\n   - Neural Networks (including LSTM, CNN, or Transformers)\n\n6. **Evaluation Metrics**: To assess the performance of an intent classification model, metrics such as accuracy, precision, recall, and F1-score are commonly used.\n\n### Applications of Intent Classification:\n\n- **Chatbots**: To understand and respond accurately to user queries.\n- **Voice Assistants**: For interpreting voice commands and executing tasks.\n- **Customer Support**: To direct inquiries to the appropriate department or provide automated responses.\n- **Search Engines**: To enhance user experience by understanding search intents.\n\n### Challenges in Intent Classification:\n\n- **Ambiguity**: User inputs can be ambiguous or context-dependent.\n- **Variability**: Different users may express the same intent in various ways.\n- **Scalability**: As the number of intents increases, maintaining and scaling the model can become complex.\n\n### Example:\n\nGiven the input \"I want to order a pizza\", an intent classification model might classify this input as the intent \"OrderFood\".\n\nIf you have a specific context or application in mind for intent classification, feel free to share, and I can provide more tailored information or examples!",
      "select_tools": "It looks like you've provided a list of items: `['item1', 'item2', 'item3']`. How can I assist you with this list?",
      "execute_tools": "Could you please provide more context or specify what type of results you are looking for? This could pertain to sports, academics, research, or any other area. Let me know how I can assist you!",
      "generate_response": "It seems like your message might be incomplete or unclear. Could you please provide more context or specify what you would like a response to? I'm here to help!",
      "enhance_response": "The term \"refined\" can have several meanings depending on the context:\n\n1. **General Definition**: In a broad sense, \"refined\" refers to something that has been improved or made more elegant, sophisticated, or pure. \n\n2. **In Chemistry**: Refined substances, such as refined sugar or refined oil, have undergone processes to remove impurities and unwanted elements, resulting in a purer product.\n\n3. **In Personal Development**: A refined individual may be described as cultured, polished, or possessing good manners and taste.\n\n4. **In Art and Design**: Refined can describe a style that is elegant and well-thought-out, often characterized by simplicity and sophistication.\n\nIf you have a specific context in mind where you would like to explore the concept of \"refined,\" please let me know!",
      "extract_facts": "Sure! Here are some interesting facts across various topics:\n\n### Science\n1. **Water**: About 71% of the Earth's surface is covered by water, but only about 2.5% of that is freshwater.\n2. **DNA**: If uncoiled, the DNA in all the cells of your body would stretch about 10 billion miles, which is enough to reach Pluto and back.\n\n### History\n1. **Ancient Egypt**: The Great Pyramid of Giza was completed around 2560 BC and was the tallest man-made structure for over 3,800 years.\n2. **World War II**: More than 70 million military personnel were mobilized during World War II, making it one of the largest conflicts in history.\n\n### Geography\n1. **Countries**: Russia is the largest country in the world, covering more than 17 million square kilometers.\n2. **Mount Everest**: The summit of Mount Everest is 8,848 meters (29,029 feet) above sea level, making it the highest point on Earth.\n\n### Animals\n1. **Blue Whale**: The blue whale is the largest animal known to have ever existed, reaching lengths of up to 100 feet and weights of over 200 tons.\n2. **Octopus**: Octopuses have three hearts and blue blood; two pump blood to the gills, while the third pumps it to the rest of the body.\n\n### Technology\n1. **Internet**: As of 2023, there are over 5 billion internet users worldwide, which is more than 60% of the global population.\n2. **Smartphones**: The first smartphone, IBM's Simon Personal Communicator, was released in 1994 and featured a touchscreen, email capability, and a calendar.\n\n### Space\n1. **Universe**: The observable universe is about 93 billion light-years in diameter, containing an estimated 100 billion galaxies.\n2. **Black Holes**: Supermassive black holes, which can have masses equivalent to billions of suns, are found at the centers of most galaxies, including our Milky Way.\n\nIf you have a specific topic in mind or need more information on a particular fact, let me know!",
      "update_memory": "It seems like you might be looking for confirmation on something specific. Could you please provide more details or clarify what you would like to confirm?",
      "suggest_followups": "Sure! I\u2019d be happy to help. Could you please specify what kind of suggestions you\u2019re looking for? It could be related to books, movies, travel, recipes, productivity, or something else entirely!",
      "prepare_streaming": "It seems you mentioned \"chunks.\" Could you provide a bit more context or specify what you're referring to? \"Chunks\" can relate to various topics, such as data processing, programming, language learning, or even food. Let me know how I can assist you!",
      "log_analytics": "\"Metrics\" generally refer to quantitative measures used to assess, compare, and track performance or progress in various fields. Depending on the context, metrics can take several forms:\n\n### Business Metrics\n- **Revenue Growth Rate**: The rate at which a company's revenue increases over a specific period.\n- **Customer Acquisition Cost (CAC)**: The cost associated with acquiring a new customer.\n- **Net Promoter Score (NPS)**: A measure of customer loyalty and satisfaction.\n- **Churn Rate**: The percentage of customers who stop using a product or service during a specific timeframe.\n\n### Marketing Metrics\n- **Return on Investment (ROI)**: A measure of the profitability of marketing campaigns.\n- **Conversion Rate**: The percentage of visitors who complete a desired action, such as making a purchase.\n- **Click-Through Rate (CTR)**: The ratio of users who click on a specific link to the number of total users who view a page or an advertisement.\n\n### Software Development Metrics\n- **Code Churn**: The percentage of a developer's own code representing recent edits.\n- **Velocity**: A measure of the amount of work a team can complete in a sprint, often used in Agile methodologies.\n- **Bug Rate**: The number of defects or bugs reported in a software product over a specific timeframe.\n\n### Financial Metrics\n- **Gross Margin**: The difference between revenue and cost of goods sold (COGS), expressed as a percentage of revenue.\n- **Debt-to-Equity Ratio**: A measure of a company's financial leverage, calculated by dividing total liabilities by shareholders' equity.\n- **Current Ratio**: A liquidity ratio that measures a company's ability to pay short-term obligations.\n\n### Health Metrics\n- **Body Mass Index (BMI)**: A simple calculation using height and weight to assess body fat.\n- **Blood Pressure Readings**: Measurements of the pressure in the arteries, often recorded as systolic over diastolic pressures.\n- **Heart Rate Variability (HRV)**: The variation in time between heartbeats, often used as an indicator of stress and overall health.\n\n### Education Metrics\n- **Graduation Rate**: The percentage of students who complete their degree program within a set period.\n- **Standardized Test Scores**: Scores from tests that are administered and scored in a consistent manner to measure educational performance.\n- **Attendance Rate**: The percentage of students present at school over a specific period.\n\n### Environmental Metrics\n- **Carbon Footprint**: The total greenhouse gas emissions caused directly and indirectly by an individual, organization, event, or product.\n- **Water Usage**: The amount of water consumed by an entity, often tracked to promote conservation.\n- **Recycling Rate**: The percentage of waste materials that are recycled as opposed to being sent to a landfill.\n\n### Importance of Metrics\n- **Performance Monitoring**: Metrics help organizations track their performance against goals and benchmarks.\n- **Decision Making**: Data-driven insights derived from metrics can facilitate informed decision-making.\n- **Accountability**: Metrics create standards for performance, helping teams and individuals understand expectations and responsibilities.\n\nIf you have a specific area of interest regarding metrics, feel free to ask for more detailed information!",
      "prepare_output": "It seems like you're asking about \"response packages,\" but the term could refer to various contexts such as programming, software development, or even emergency response scenarios. Could you please clarify what specific type of \"response package\" you're interested in? This will help me provide you with the most relevant information!"
    },
    "timestamp": "2025-07-17T08:51:47.917794"
  },
  "model_requirements_pipeline.yaml": {
    "status": "error",
    "error": "Failed to compile YAML: Schema validation failed: 0 is not of type 'string'",
    "error_type": "YAMLCompilerError",
    "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/schema_validator.py\", line 45, in validate\n    self.validator.validate(pipeline_def)\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jsonschema/validators.py\", line 451, in validate\n    raise error\njsonschema.exceptions.ValidationError: 0 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['steps']['items']['properties']['requires_model']['properties']['min_size']:\n    {'type': 'string'}\n\nOn instance['steps'][0]['requires_model']['min_size']:\n    0\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 91, in compile\n    self.schema_validator.validate(raw_pipeline)\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/schema_validator.py\", line 47, in validate\n    raise SchemaValidationError(f\"Schema validation failed: {e.message}\") from e\norchestrator.compiler.schema_validator.SchemaValidationError: Schema validation failed: 0 is not of type 'string'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_comprehensive.py\", line 112, in test_all_examples\n    result = await self.orchestrator.execute_yaml(yaml_content, inputs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Schema validation failed: 0 is not of type 'string'\n",
    "inputs": {},
    "timestamp": "2025-07-17T08:52:58.636392"
  },
  "multi_agent_collaboration.yaml": {
    "status": "error",
    "error": "Failed to compile YAML: Failed to render template '<AUTO>create a network of {{num_agents}} specialized AI agents with roles:\n      1. Researcher agents - gather information and conduct analysis\n      2. Analyst agents - process data and identify patterns\n      3. Creative agents - generate innovative solutions\n      4. Critic agents - evaluate and identify issues\n      5. Synthesizer agent - integrate and coordinate\n      \n      Use {{agent_roles}} role distribution strategy.\n      Create communication channels between agents.\n      Return agent profiles and network topology</AUTO>': 'num_agents' is undefined",
    "error_type": "YAMLCompilerError",
    "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 149, in process_value\n    return template.render(**context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 1304, in render\n    self.environment.handle_exception()\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 939, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"<template>\", line 1, in top-level template code\njinja2.exceptions.UndefinedError: 'num_agents' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 94, in compile\n    processed = self._process_templates(raw_pipeline, context or {})\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 179, in _process_templates\n    return process_value(pipeline_def)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 176, in process_value\n    return [process_value(item) for item in value]\n            ^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 170, in process_value\n    raise TemplateRenderError(\norchestrator.compiler.yaml_compiler.TemplateRenderError: Failed to render template '<AUTO>create a network of {{num_agents}} specialized AI agents with roles:\n      1. Researcher agents - gather information and conduct analysis\n      2. Analyst agents - process data and identify patterns\n      3. Creative agents - generate innovative solutions\n      4. Critic agents - evaluate and identify issues\n      5. Synthesizer agent - integrate and coordinate\n      \n      Use {{agent_roles}} role distribution strategy.\n      Create communication channels between agents.\n      Return agent profiles and network topology</AUTO>': 'num_agents' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_comprehensive.py\", line 112, in test_all_examples\n    result = await self.orchestrator.execute_yaml(yaml_content, inputs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Failed to render template '<AUTO>create a network of {{num_agents}} specialized AI agents with roles:\n      1. Researcher agents - gather information and conduct analysis\n      2. Analyst agents - process data and identify patterns\n      3. Creative agents - generate innovative solutions\n      4. Critic agents - evaluate and identify issues\n      5. Synthesizer agent - integrate and coordinate\n      \n      Use {{agent_roles}} role distribution strategy.\n      Create communication channels between agents.\n      Return agent profiles and network topology</AUTO>': 'num_agents' is undefined\n",
    "inputs": {
      "project_description": "Build a web application for task management",
      "agents": [
        "researcher",
        "designer",
        "developer"
      ],
      "deadline": "2024-12-31",
      "budget": 50000
    },
    "timestamp": "2025-07-17T08:52:58.643728"
  },
  "multi_model_pipeline.yaml": {
    "status": "error",
    "error": "Failed to compile YAML: Schema validation failed: '1.0' does not match '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$'",
    "error_type": "YAMLCompilerError",
    "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/schema_validator.py\", line 45, in validate\n    self.validator.validate(pipeline_def)\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jsonschema/validators.py\", line 451, in validate\n    raise error\njsonschema.exceptions.ValidationError: '1.0' does not match '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$'\n\nFailed validating 'pattern' in schema['properties']['version']:\n    {'type': 'string', 'pattern': '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$'}\n\nOn instance['version']:\n    '1.0'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 91, in compile\n    self.schema_validator.validate(raw_pipeline)\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/schema_validator.py\", line 47, in validate\n    raise SchemaValidationError(f\"Schema validation failed: {e.message}\") from e\norchestrator.compiler.schema_validator.SchemaValidationError: Schema validation failed: '1.0' does not match '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_comprehensive.py\", line 112, in test_all_examples\n    result = await self.orchestrator.execute_yaml(yaml_content, inputs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Schema validation failed: '1.0' does not match '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$'\n",
    "inputs": {},
    "timestamp": "2025-07-17T08:52:58.648044"
  },
  "research_assistant.yaml": {
    "status": "success",
    "execution_time": 27.336534,
    "inputs": {
      "query": "latest developments in artificial intelligence 2024",
      "context": "Focus on breakthrough technologies and practical applications",
      "max_sources": 10,
      "quality_threshold": 0.8
    },
    "outputs": {},
    "step_results": {
      "analyze_query": "As of my last knowledge update in October 2023, I cannot provide specific developments in artificial intelligence (AI) that occurred in 2024. However, I can highlight some trends and areas of research that were gaining momentum and may continue to evolve in 2024:\n\n1. **Generative AI Advancements**: Following the success of models like GPT-4, researchers were expected to continue improving generative models, focusing on their capabilities in creativity, coherence, and contextual understanding.\n\n2. **AI Ethics and Regulation**: With increasing concerns about the ethical implications of AI, regulatory frameworks were likely to be developed and implemented more rigorously across different regions, focusing on transparency, accountability, and fairness in AI systems.\n\n3. **Multimodal Models**: The integration of various data types (text, image, audio) into single models was a growing focus, leading to more sophisticated applications in fields like healthcare, education, and entertainment.\n\n4. **AI in Healthcare**: The deployment of AI for diagnostic tools, personalized medicine, and drug discovery was expanding. Research into AI's role in managing public health crises was also likely to continue.\n\n5. **Edge AI**: With the rise of IoT devices, there was a noticeable shift towards edge AI, enabling data processing closer to the data source, which improves response times and reduces bandwidth use.\n\n6. **AI for Climate Change**: AI applications aimed at addressing climate change challenges, such as optimizing energy consumption, improving supply chains, and enhancing climate modeling, were gaining traction.\n\n7. **Human-AI Collaboration**: Advances in AI were increasingly focused on augmenting human capabilities rather than replacing them, leading to new tools that enhance productivity across various sectors.\n\n8. **Explainable AI**: As AI systems become more complex, the need for transparency and interpretability was increasingly recognized, driving research into explainable AI that can provide insights into decision-making processes.\n\nFor the most current developments in AI for 2024, I recommend checking reputable tech news sources, research publications, or industry reports that focus on AI advancements.",
      "web_search": "Of course! Please provide the text or topic you would like me to summarize.",
      "extract_content": "It seems like you might be asking about parsing, which generally refers to the process of analyzing a string of symbols or data, often in the context of programming or data processing. Could you please clarify what specific context or type of data you're interested in parsing? For example, are you looking for help with parsing text, JSON, XML, or something else?",
      "analyze_credibility": "It seems like you've provided a value, 0.8. Could you please provide more context or specify what you would like to know or discuss regarding this number?",
      "filter_sources": "The term \"curated\" generally refers to the process of selecting, organizing, and presenting content in a thoughtful and deliberate manner. It is commonly used in various contexts, such as:\n\n1. **Art and Museum Exhibitions**: Curators select artworks and artifacts for display, often with a specific theme or narrative in mind.\n\n2. **Digital Content**: In the realm of social media, blogs, and websites, curated content involves gathering and sharing articles, videos, and other media that align with a particular interest or audience.\n\n3. **Music and Playlists**: Curated playlists on music streaming services are created by individuals or algorithms that select songs based on mood, genre, or trends.\n\n4. **Events and Experiences**: Curated events or experiences are designed with a specific vision, ensuring that every aspect aligns with the intended theme or goal.\n\nOverall, curation is about enhancing the user experience by providing a refined selection of content that adds value and meaning. If you have a specific context in mind or need more detailed information, feel free to ask!",
      "synthesize_findings": "It looks like you've entered the number \"100.\" How can I assist you with that? Are you looking for information or context related to it?",
      "generate_report": "It seems like you entered \"1000.\" Could you please provide more context or clarify what you would like to know or discuss related to that number?",
      "export_pdf": "It seems like you want to generate a research report based on a specific query. However, I need more details to provide you with the relevant information. Please specify the topic or query you'd like me to research, and I'll do my best to assist you!",
      "quality_check": "It seems like you've provided the number 0.7. Could you please provide more context or specify what you'd like to know or discuss about it?"
    },
    "timestamp": "2025-07-17T08:52:58.648639"
  },
  "scalable_customer_service_agent.yaml": {
    "status": "error",
    "error": "Failed to compile YAML: Failed to render template '<AUTO>receive customer interaction from {{channel}}:\n      Interaction ID: {{interaction_id}}\n      Customer ID: {{customer_id}}\n      Content: {{content}}\n      Metadata: {{metadata}}\n      \n      Standardize format across channels and extract:\n      1. Timestamp\n      2. Channel context\n      3. Session information\n      4. Attachments if any\n      5. Priority indicators\n      \n      Return standardized interaction data</AUTO>': 'metadata' is undefined",
    "error_type": "YAMLCompilerError",
    "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 149, in process_value\n    return template.render(**context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 1304, in render\n    self.environment.handle_exception()\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 939, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"<template>\", line 5, in top-level template code\njinja2.exceptions.UndefinedError: 'metadata' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 94, in compile\n    processed = self._process_templates(raw_pipeline, context or {})\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 179, in _process_templates\n    return process_value(pipeline_def)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 176, in process_value\n    return [process_value(item) for item in value]\n            ^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 170, in process_value\n    raise TemplateRenderError(\norchestrator.compiler.yaml_compiler.TemplateRenderError: Failed to render template '<AUTO>receive customer interaction from {{channel}}:\n      Interaction ID: {{interaction_id}}\n      Customer ID: {{customer_id}}\n      Content: {{content}}\n      Metadata: {{metadata}}\n      \n      Standardize format across channels and extract:\n      1. Timestamp\n      2. Channel context\n      3. Session information\n      4. Attachments if any\n      5. Priority indicators\n      \n      Return standardized interaction data</AUTO>': 'metadata' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_comprehensive.py\", line 112, in test_all_examples\n    result = await self.orchestrator.execute_yaml(yaml_content, inputs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Failed to render template '<AUTO>receive customer interaction from {{channel}}:\n      Interaction ID: {{interaction_id}}\n      Customer ID: {{customer_id}}\n      Content: {{content}}\n      Metadata: {{metadata}}\n      \n      Standardize format across channels and extract:\n      1. Timestamp\n      2. Channel context\n      3. Session information\n      4. Attachments if any\n      5. Priority indicators\n      \n      Return standardized interaction data</AUTO>': 'metadata' is undefined\n",
    "inputs": {
      "interaction_id": "INT-2024-001",
      "customer_id": "CUST-12345",
      "channel": "chat",
      "content": "I'm having trouble with my recent order and need a refund",
      "languages": [
        "en"
      ],
      "sla_targets": {
        "first_response": 60,
        "resolution": 3600
      }
    },
    "timestamp": "2025-07-17T08:53:25.997087"
  },
  "simple_pipeline.yaml": {
    "status": "error",
    "error": "Failed to compile YAML: Schema validation failed: '1.0' does not match '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$'",
    "error_type": "YAMLCompilerError",
    "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/schema_validator.py\", line 45, in validate\n    self.validator.validate(pipeline_def)\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jsonschema/validators.py\", line 451, in validate\n    raise error\njsonschema.exceptions.ValidationError: '1.0' does not match '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$'\n\nFailed validating 'pattern' in schema['properties']['version']:\n    {'type': 'string', 'pattern': '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$'}\n\nOn instance['version']:\n    '1.0'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 91, in compile\n    self.schema_validator.validate(raw_pipeline)\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/schema_validator.py\", line 47, in validate\n    raise SchemaValidationError(f\"Schema validation failed: {e.message}\") from e\norchestrator.compiler.schema_validator.SchemaValidationError: Schema validation failed: '1.0' does not match '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_comprehensive.py\", line 112, in test_all_examples\n    result = await self.orchestrator.execute_yaml(yaml_content, inputs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Schema validation failed: '1.0' does not match '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$'\n",
    "inputs": {},
    "timestamp": "2025-07-17T08:53:26.001086"
  }
}