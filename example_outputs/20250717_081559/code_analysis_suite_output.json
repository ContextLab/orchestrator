{
  "example": "code_analysis_suite.yaml",
  "status": "error",
  "error": "Failed to compile YAML: Failed to render template '<AUTO>review code quality using AI analysis for {{item}}:\n      1. Code structure and organization\n      2. Design patterns and best practices\n      3. Variable/function naming conventions\n      4. Error handling completeness\n      5. Performance optimization opportunities\n      6. Maintainability assessment\n      7. Suggested refactoring improvements\n      \n      Provide specific, actionable suggestions</AUTO>': 'item' is undefined",
  "error_type": "YAMLCompilerError",
  "traceback": "Traceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 149, in process_value\n    return template.render(**context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 1304, in render\n    self.environment.handle_exception()\n  File \"/Users/jmanning/miniconda3/lib/python3.12/site-packages/jinja2/environment.py\", line 939, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"<template>\", line 1, in top-level template code\njinja2.exceptions.UndefinedError: 'item' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 94, in compile\n    processed = self._process_templates(raw_pipeline, context or {})\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 179, in _process_templates\n    return process_value(pipeline_def)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 176, in process_value\n    return [process_value(item) for item in value]\n            ^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 174, in process_value\n    return {k: process_value(v) for k, v in value.items()}\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 170, in process_value\n    raise TemplateRenderError(\norchestrator.compiler.yaml_compiler.TemplateRenderError: Failed to render template '<AUTO>review code quality using AI analysis for {{item}}:\n      1. Code structure and organization\n      2. Design patterns and best practices\n      3. Variable/function naming conventions\n      4. Error handling completeness\n      5. Performance optimization opportunities\n      6. Maintainability assessment\n      7. Suggested refactoring improvements\n      \n      Provide specific, actionable suggestions</AUTO>': 'item' is undefined\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/jmanning/orchestrator/test_all_examples_detailed.py\", line 123, in test_example\n    result = await self.orchestrator.execute_yaml(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/orchestrator.py\", line 406, in execute_yaml\n    pipeline = await self.yaml_compiler.compile(yaml_content, context)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/jmanning/orchestrator/src/orchestrator/compiler/yaml_compiler.py\", line 106, in compile\n    raise YAMLCompilerError(f\"Failed to compile YAML: {e}\") from e\norchestrator.compiler.yaml_compiler.YAMLCompilerError: Failed to compile YAML: Failed to render template '<AUTO>review code quality using AI analysis for {{item}}:\n      1. Code structure and organization\n      2. Design patterns and best practices\n      3. Variable/function naming conventions\n      4. Error handling completeness\n      5. Performance optimization opportunities\n      6. Maintainability assessment\n      7. Suggested refactoring improvements\n      \n      Provide specific, actionable suggestions</AUTO>': 'item' is undefined\n",
  "inputs": {
    "repo_path": "./src/orchestrator",
    "languages": [
      "python"
    ],
    "analysis_depth": "comprehensive",
    "security_scan": true,
    "performance_check": true,
    "doc_check": true,
    "severity_threshold": "medium"
  },
  "timestamp": "2025-07-17T08:18:42.480773"
}