#!/usr/bin/env python3
"""
Fix output files, update models, and prepare all pipelines.
"""

import re
from pathlib import Path
import yaml

# First, fix files with code blocks
def fix_markdown_code_blocks():
    """Remove markdown code blocks wrapping content."""
    output_dir = Path("examples/output")
    
    for md_file in output_dir.glob("*.md"):
        content = md_file.read_text()
        
        # Check if file starts with ```markdown and ends with ```
        if content.strip().startswith("```markdown") and content.strip().endswith("```"):
            # Remove the code block markers
            fixed_content = content.strip()
            fixed_content = fixed_content[11:]  # Remove ```markdown
            if fixed_content.endswith("```"):
                fixed_content = fixed_content[:-3]
            
            # Also replace template variables that weren't processed
            fixed_content = fixed_content.replace("{{execution.timestamp}}", "2025-07-17")
            fixed_content = fixed_content.replace("{{audience}}", "software architects")
            
            md_file.write_text(fixed_content.strip())
            print(f"‚úÖ Fixed code blocks in: {md_file.name}")


# Model mapping for updates
MODERN_MODELS = {
    "openai": "gpt-4o",  # Latest GPT-4
    "anthropic": "claude-3-5-sonnet-20241022",  # Claude 3.5 Sonnet
    "google": "gemini-2.0-flash-exp",  # Gemini 2.0
    "ollama": "llama3.2",  # Llama 3.2
    "huggingface": "meta-llama/Llama-3.2-3B-Instruct",  # Llama 3.2 on HF
}


def update_model_in_yaml(yaml_content):
    """Update model references to latest versions."""
    # Update model references
    replacements = [
        # OpenAI
        (r'model:\s*"?openai/gpt-[\w-]+"?', f'model: "openai/{MODERN_MODELS["openai"]}"'),
        (r'model:\s*"?gpt-[\w-]+"?', f'model: "openai/{MODERN_MODELS["openai"]}"'),
        
        # Anthropic
        (r'model:\s*"?anthropic/claude-[\w-]+"?', f'model: "anthropic/{MODERN_MODELS["anthropic"]}"'),
        (r'model:\s*"?claude-[\w-]+"?', f'model: "anthropic/{MODERN_MODELS["anthropic"]}"'),
        
        # Google
        (r'model:\s*"?google/gemini-[\w.-]+"?', f'model: "google/{MODERN_MODELS["google"]}"'),
        (r'model:\s*"?gemini-[\w.-]+"?', f'model: "google/{MODERN_MODELS["google"]}"'),
        
        # Ollama
        (r'model:\s*"?ollama/llama[\w.-]*"?', f'model: "ollama/{MODERN_MODELS["ollama"]}"'),
        
        # HuggingFace
        (r'model:\s*"?huggingface/mistral[\w/-]+"?', f'model: "huggingface/{MODERN_MODELS["huggingface"]}"'),
        (r'model:\s*"?mistralai/[\w-]+"?', f'model: "huggingface/{MODERN_MODELS["huggingface"]}"'),
    ]
    
    updated_content = yaml_content
    for pattern, replacement in replacements:
        updated_content = re.sub(pattern, replacement, updated_content, flags=re.IGNORECASE)
    
    return updated_content


def add_save_step_to_yaml(yaml_content, pipeline_name):
    """Add a save step if not already present."""
    # Check if there's already a save step
    if 'save' in yaml_content.lower() and ('write' in yaml_content.lower() or 'file' in yaml_content.lower()):
        return yaml_content
    
    # Parse YAML to understand structure
    lines = yaml_content.split('\n')
    
    # Find where steps end
    steps_section = False
    last_step_indent = 0
    insert_line = -1
    
    for i, line in enumerate(lines):
        if line.strip().startswith('steps:'):
            steps_section = True
            continue
        
        if steps_section and line.strip() and not line.strip().startswith('-'):
            # End of steps section
            insert_line = i
            break
        
        if steps_section and line.strip().startswith('-'):
            last_step_indent = len(line) - len(line.lstrip())
    
    if insert_line == -1:
        # Find the outputs section
        for i, line in enumerate(lines):
            if line.strip().startswith('outputs:'):
                insert_line = i
                break
    
    # Create save step
    save_step = f'''
  - id: save_output
    action: |
      Save the following content to examples/output/{pipeline_name}.md:
      
      # {pipeline_name.replace('_', ' ').title()}
      
      *Generated on: {{{{execution.timestamp}}}}*
      *Pipeline: {pipeline_name}*
      
      ## Results
      
      {{% for step_id, result in results.items() if step_id != 'save_output' %}}
      ### {{{{ step_id }}}}
      
      {{{{ result | truncate(1000) }}}}
      
      {{% endfor %}}
      
      ---
      *Generated by Orchestrator Pipeline*
    depends_on: [{{{{ previous_steps | join(', ') }}}}]
'''
    
    # Insert the save step
    if insert_line > 0:
        lines.insert(insert_line, save_step)
    
    return '\n'.join(lines)


def process_all_yaml_files():
    """Process all YAML files to update models and add save steps."""
    # Get all YAML files
    yaml_files = []
    yaml_files.extend(Path("examples").glob("*.yaml"))
    yaml_files.extend(Path("examples/working").glob("*.yaml"))
    
    for yaml_file in yaml_files:
        if yaml_file.name.endswith('_save.yaml'):
            continue  # Skip these, we'll merge them
        
        print(f"\nüìù Processing: {yaml_file}")
        
        content = yaml_file.read_text()
        
        # Update models
        content = update_model_in_yaml(content)
        
        # Add save step if needed
        pipeline_name = yaml_file.stem
        content = add_save_step_to_yaml(content, pipeline_name)
        
        # Save updated file
        yaml_file.write_text(content)
        print(f"‚úÖ Updated: {yaml_file}")


def merge_save_yaml_files():
    """Merge *_save.yaml files with their main counterparts."""
    save_files = list(Path("examples/working").glob("*_save.yaml"))
    
    for save_file in save_files:
        base_name = save_file.stem.replace('_with_save', '').replace('_save', '')
        
        # Find corresponding main file
        main_files = [
            Path(f"examples/{base_name}.yaml"),
            Path(f"examples/working/{base_name}.yaml"),
            Path(f"examples/{base_name}_simple.yaml"),
            Path(f"examples/working/{base_name}_simple.yaml"),
        ]
        
        main_file = None
        for mf in main_files:
            if mf.exists():
                main_file = mf
                break
        
        if main_file:
            print(f"\nüîÑ Merging {save_file.name} into {main_file.name}")
            
            # Read save file to extract save steps
            save_content = save_file.read_text()
            
            # Extract save step (look for steps with 'save' in id)
            save_steps = []
            lines = save_content.split('\n')
            in_save_step = False
            current_step = []
            
            for line in lines:
                if '- id:' in line and 'save' in line.lower():
                    in_save_step = True
                    current_step = [line]
                elif in_save_step and line.strip() and not line.strip().startswith('-'):
                    current_step.append(line)
                elif in_save_step and line.strip().startswith('-'):
                    # New step starting
                    save_steps.append('\n'.join(current_step))
                    in_save_step = False
                    current_step = []
                elif in_save_step:
                    current_step.append(line)
            
            if current_step:
                save_steps.append('\n'.join(current_step))
            
            # Add save steps to main file
            main_content = main_file.read_text()
            if save_steps and 'save' not in main_content.lower():
                # Insert before outputs section
                lines = main_content.split('\n')
                insert_idx = -1
                
                for i, line in enumerate(lines):
                    if line.strip().startswith('outputs:'):
                        insert_idx = i
                        break
                
                if insert_idx > 0:
                    for step in save_steps:
                        lines.insert(insert_idx, step)
                        insert_idx += 1
                    
                    main_file.write_text('\n'.join(lines))
                    print(f"‚úÖ Merged save steps into {main_file.name}")
            
            # Delete the save file
            save_file.unlink()
            print(f"üóëÔ∏è  Removed {save_file.name}")


def main():
    """Run all fixes and updates."""
    print("üîß Fixing and Updating All Pipelines")
    print("="*60)
    
    # Step 1: Fix existing output files
    print("\n1Ô∏è‚É£ Fixing code blocks in output files...")
    fix_markdown_code_blocks()
    
    # Step 2: Update all YAML files
    print("\n2Ô∏è‚É£ Updating models in all YAML files...")
    process_all_yaml_files()
    
    # Step 3: Merge save files
    print("\n3Ô∏è‚É£ Merging save YAML files...")
    merge_save_yaml_files()
    
    print("\n‚ú® All updates complete!")


if __name__ == "__main__":
    main()