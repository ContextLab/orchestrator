[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "py-orc"
version = "0.1.0"
description = "AI pipeline orchestration framework with intelligent ambiguity resolution"
authors = [
    {name = "Contextual Dynamics Lab", email = "info@context-lab.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "aiohttp>=3.8.0",
    "asyncio-mqtt>=0.13.0",
    "jinja2>=3.0.0",
    "jsonschema>=4.0.0",
    "numpy>=1.21.0",
    "docker>=6.0.0",
    "redis>=4.0.0",
    "psycopg2-binary>=2.9.0",
    "cryptography>=3.4.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autoapi>=2.0.0",
    "myst-parser>=0.18.0",
    "nbsphinx>=0.8.0",
]
notebooks = [
    "jupyter>=1.0.0",
    "notebook>=6.4.0",
    "ipywidgets>=8.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
]
all = [
    "orchestrator[dev,docs,notebooks]",
]

[project.urls]
Homepage = "https://www.context-lab.com/"
Repository = "https://github.com/ContextLab/orchestrator"
Documentation = "https://orc.readthedocs.io"
Changelog = "https://github.com/ContextLab/orchestrator/blob/main/CHANGELOG.md"
Organization = "https://www.context-lab.com/"

[project.scripts]
py-orc = "orchestrator.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
orchestrator = ["py.typed", "*.yaml", "*.yml", "*.json"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["orchestrator"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "docker.*",
    "redis.*",
    "psycopg2.*",
    "openai.*",
    "anthropic.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=orchestrator",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=95",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "docker: marks tests that require docker",
    "redis: marks tests that require redis",
    "postgres: marks tests that require postgres",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]