name: "Interactive Chat Bot Demo with Simulated User"
description: "Demonstrates chatbot with simulated user interactions using two AI models"
model: "anthropic/claude-sonnet-4-20250514"

inputs:
  conversation_topic:
    type: string
    description: "Topic for the simulated conversation"
    default: "AI and its impact on education"
  
  num_exchanges:
    type: integer
    description: "Number of conversation exchanges"
    default: 5
  
  user_persona:
    type: string
    description: "Persona for simulated user"
    default: "curious-student"
  
  bot_persona:
    type: string
    description: "Bot persona"
    default: "helpful-teacher"

steps:
  # Step 1: Initialize conversation
  - id: init_conversation
    action: |
      Initialize a new conversation about: {{conversation_topic}}
      
      Set up:
      1. Conversation ID: conv_{{execution.timestamp}}
      2. User persona: {{user_persona}}
      3. Bot persona: {{bot_persona}}
      4. Initial context and greeting
      
      Return conversation setup details

          # Step 2: Generate user message 1
          - id: user_message_1
          action: |
      As a {{user_persona}}, generate an opening message about {{conversation_topic}}.
      
      The message should:
      1. Show genuine curiosity
      2. Ask an engaging question
      3. Be natural and conversational
      4. Set the tone for the discussion
      
      model: "openai/gpt-4o"
    depends_on: [init_conversation]

  # Step 3: Bot response 1
  - id: bot_response_1
    action: |
      As a {{bot_persona}}, respond to: {{user_message_1.result}}
      
      Context: This is about {{conversation_topic}}
      
      Your response should:
      1. Be helpful and informative
      2. Encourage further discussion
      3. Match the {{bot_persona}} style
      4. Provide concrete examples
      5. Ask a follow-up question
    depends_on: [user_message_1]

  # Step 4: Generate user message 2
  - id: user_message_2
    action: |
      As a {{user_persona}}, continue the conversation.
      Previous exchange:
      User: {{user_message_1.result}}
      Bot: {{bot_response_1.result}}
      
      Generate a follow-up that:
      1. Shows you understood the response
      2. Asks for clarification or more details
      3. Shares a relevant thought or experience
      4. Maintains conversational flow
      
      model: "openai/gpt-4o"
    depends_on: [bot_response_1]

  # Step 5: Bot response 2
  - id: bot_response_2
    action: |
      Continue as {{bot_persona}}, responding to: {{user_message_2.result}}
      
      Conversation so far:
      User: {{user_message_1.result}}
      Bot: {{bot_response_1.result}}
      User: {{user_message_2.result}}
      
      Provide a response that:
      1. Addresses the new question/comment
      2. Builds on previous information
      3. Uses examples or analogies
      4. Maintains engagement
    depends_on: [user_message_2]

  # Step 6: Generate user message 3
  - id: user_message_3
    action: |
      As a {{user_persona}}, dive deeper into the topic.
      
      Previous conversation:
      {{bot_response_2.result}}
      
      Your message should:
      1. Show critical thinking
      2. Challenge an assumption respectfully
      3. Ask about practical applications
      4. Express your perspective
      
      model: "openai/gpt-4o"
    depends_on: [bot_response_2]

  # Step 7: Bot response 3
  - id: bot_response_3
    action: |
      As {{bot_persona}}, provide a thoughtful response to: {{user_message_3.result}}
      
      Address any challenges raised and:
      1. Acknowledge valid points
      2. Provide balanced perspective
      3. Share relevant research or data
      4. Encourage critical thinking
    depends_on: [user_message_3]

  # Step 8: Generate user message 4
  - id: user_message_4
    action: |
      As a {{user_persona}}, ask about future implications.
      
      Based on the discussion about {{conversation_topic}}, ask about:
      1. Future trends or predictions
      2. Potential challenges
      3. Personal preparation or adaptation
      4. Ethical considerations
      
      model: "openai/gpt-4o"
    depends_on: [bot_response_3]

  # Step 9: Bot response 4
  - id: bot_response_4
    action: |
      As {{bot_persona}}, discuss future implications of {{conversation_topic}}.
      
      Responding to: {{user_message_4.result}}
      
      Cover:
      1. Short-term and long-term predictions
      2. Opportunities and challenges
      3. Practical advice
      4. Ethical considerations
    depends_on: [user_message_4]

  # Step 10: Generate user closing message
  - id: user_message_5
    action: |
      As a {{user_persona}}, wrap up the conversation.
      
      Your closing message should:
      1. Thank the bot for the discussion
      2. Summarize a key learning
      3. Express how this will help you
      4. End on a positive note
      
      model: "openai/gpt-4o"
    depends_on: [bot_response_4]

  # Step 11: Bot closing response
  - id: bot_response_5
    action: |
      As {{bot_persona}}, provide a warm closing response to: {{user_message_5.result}}
      
      Include:
      1. Appreciation for the conversation
      2. Summary of key points discussed
      3. Encouragement for continued learning
      4. An invitation to chat again
    depends_on: [user_message_5]

  # Step 12: Format conversation
  - id: format_conversation
    action: |
      Format the complete conversation as a readable dialogue:
      
      # Conversation: {{conversation_topic}}
      
      **Participants:**
      - User ({{user_persona}}): Simulated by GPT-4o-mini
      - Bot ({{bot_persona}}): Powered by Claude Sonnet 4
      
      ---
      
      **User:** {{user_message_1.result}}
      
      **Bot:** {{bot_response_1.result}}
      
      **User:** {{user_message_2.result}}
      
      **Bot:** {{bot_response_2.result}}
      
      **User:** {{user_message_3.result}}
      
      **Bot:** {{bot_response_3.result}}
      
      **User:** {{user_message_4.result}}
      
      **Bot:** {{bot_response_4.result}}
      
      **User:** {{user_message_5.result}}
      
      **Bot:** {{bot_response_5.result}}
      
      ---
      
      ## Conversation Analysis
      
      - **Topic**: {{conversation_topic}}
      - **Total Exchanges**: 5
      - **User Model**: OpenAI GPT-4o-mini
      - **Bot Model**: Anthropic Claude Sonnet 4
      - **Generated on**: {{execution.timestamp}}
    depends_on: [bot_response_5]

  # Step 13: Save conversation to file
  - id: save_conversation
    action: |
      Save the following content to examples/output/interactive_chat_bot_demo.md:
      

      {{format_conversation.result}}
      
      ## How to Use This Demo with Real Users
      
      To adapt this demo for real user interaction:
      
      1. **Remove simulated user steps**: Delete steps that generate user messages
      2. **Add user input prompts**: Replace with actual user input collection
      3. **Maintain bot response logic**: Keep all bot response steps
      4. **Add input validation**: Ensure user messages are properly formatted
      5. **Enable streaming**: Set `enable_streaming: true` for real-time responses
      
      ### Example modification:
      ```yaml
      - id: get_user_input
        action: |
      Prompt user for input with: "What would you like to know about {{conversation_topic}}?"
          Wait for and return user response
      ```
      
      ### Integration points:
      - Web interface: Connect via WebSocket for real-time chat
      - CLI: Use interactive prompts
      - API: Accept messages via REST endpoints
      
      ---
      *This demo showcases AI-to-AI conversation. For production use, replace simulated users with actual user input mechanisms.*
    depends_on: [format_conversation]
    tags: ["output", "file-save"]


  - id: save_output
    action: |
      Save the pipeline output to markdown file.
      
      Create a file at: examples/output/interactive_chat_bot_demo.md
      
      Content to save:
      # Interactive Chat Bot Demo
      
      Generated on: {{execution.timestamp}}
      
      ## Pipeline Output
      
      {{format_conversation.result}}
      
      ---
      Generated by Orchestrator Pipeline
    depends_on: [format_conversation]

outputs:
  conversation_file: "examples/output/chatbot_demo_{{conversation_topic | replace(' ', '_') | lower}}.md"
  total_messages: "10"
  user_model: "openai/gpt-4o"
  bot_model: "anthropic/claude-sonnet-4-20250514"
  formatted_conversation: "{{format_conversation.result}}"