#!/usr/bin/env python3
"""Debug execution levels in pipeline."""

import asyncio
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from orchestrator import Orchestrator, init_models
from orchestrator.compiler.yaml_compiler import YAMLCompiler


async def test_execution_levels():
    """Debug execution levels."""
    # Initialize models
    print("Initializing models...")
    init_models()
    
    # Simple test pipeline
    yaml_content = """
id: test-template-fix
name: Test Template Fix
description: Test our template rendering fixes

parameters:
  topic:
    type: string
    default: "AI"
  output_dir:
    type: string
    default: "test_output"

steps:
  - id: generate_content
    action: generate_text
    parameters:
      prompt: "Write a brief summary about {{ topic }}"
      model: openai/gpt-4o-mini
      max_tokens: 100
  
  - id: save_result
    tool: filesystem
    action: write
    parameters:
      path: "{{ output_dir }}/{{ topic | slugify }}_summary.md"
      content: |
        # Summary: {{ topic }}
        
        **Date:** {{ execution.timestamp }}
        **Output Directory:** {{ output_dir }}
        
        ## Content
        
        {{ generate_content.result }}
        
        ---
        *Generated by Test Pipeline*
    dependencies:
      - generate_content

outputs:
  summary: "{{ generate_content.result }}"
  file_path: "{{ save_result.filepath | default('Not saved') }}"
"""
    
    # Compile pipeline
    from orchestrator.models.registry_singleton import get_model_registry
    registry = get_model_registry()
    compiler = YAMLCompiler(model_registry=registry)
    inputs = {"topic": "artificial intelligence", "output_dir": "test_results"}
    pipeline = await compiler.compile(yaml_content, inputs)
    
    # Get execution levels
    levels = pipeline.get_execution_levels()
    print(f"\nExecution levels for pipeline:")
    for i, level in enumerate(levels):
        print(f"  Level {i}: {level}")
        for task_id in level:
            task = pipeline.get_task(task_id)
            print(f"    - {task_id}: dependencies={task.dependencies}")


if __name__ == "__main__":
    asyncio.run(test_execution_levels())