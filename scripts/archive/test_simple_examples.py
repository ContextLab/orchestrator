#!/usr/bin/env python3
"""
Test simple working examples that compile correctly.
"""

import asyncio
import os
from pathlib import Path

from orchestrator.compiler.yaml_compiler import YAMLCompiler
from orchestrator.control_systems.model_based_control_system import ModelBasedControlSystem
from orchestrator.models.model_registry import ModelRegistry
from orchestrator.integrations.openai_model import OpenAIModel
from orchestrator.integrations.anthropic_model import AnthropicModel
from orchestrator.integrations.google_model import GoogleModel


async def test_research_simple():
    """Simple research test."""
    print("\n" + "="*60)
    print("Testing Simple Research Pipeline")
    print("="*60)
    
    model_registry = ModelRegistry()
    model = GoogleModel(model_name="gemini-1.5-flash")
    model_registry.register_model(model)
    
    control_system = ModelBasedControlSystem(model_registry)
    compiler = YAMLCompiler()
    
    yaml_content = '''
name: "Simple Research"
description: "Basic research pipeline"
model: "google/gemini-1.5-flash"

inputs:
  topic:
    type: string
    required: true

steps:
  - id: research
    action: |
      Research the topic: {{topic}}
      
      Provide a comprehensive overview including:
      1. Key concepts and definitions
      2. Current state and trends
      3. Important considerations
      4. Future outlook
      
      Write 3-4 paragraphs of detailed information.
      
  - id: save_report
    action: |
      Save the following research report to examples/output/research_{{topic | replace(' ', '_') | lower}}.md:
      
      # Research Report: {{topic}}
      
      *Generated on: {{execution.timestamp}}*
      *Model: Google Gemini 1.5 Flash*
      
      ## Research Overview
      
      {{research.result}}
      
      ---
      *Generated by Orchestrator Research Pipeline*
    depends_on: [research]

outputs:
  report: "{{research.result}}"
  file_path: "examples/output/research_{{topic | replace(' ', '_') | lower}}.md"
'''
    
    inputs = {"topic": "Impact of AI on software development"}
    
    try:
        pipeline = await compiler.compile(yaml_content, inputs)
        results = await control_system.execute_pipeline(pipeline)
        
        print("\n‚úÖ Research completed successfully!")
        print(f"\nResearch Result (first 500 chars):")
        print(results.get('research', 'No result')[:500] + "...")
        
        return True, results
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False, None


async def test_chatbot_simple():
    """Simple chatbot conversation."""
    print("\n" + "="*60)
    print("Testing Simple Chatbot Conversation")
    print("="*60)
    
    model_registry = ModelRegistry()
    
    # Register both models
    user_model = OpenAIModel(model_name="gpt-4o-mini")
    bot_model = AnthropicModel(model_name="claude-3-haiku-20240307")
    model_registry.register_model(user_model)
    model_registry.register_model(bot_model)
    
    control_system = ModelBasedControlSystem(model_registry)
    compiler = YAMLCompiler()
    
    yaml_content = '''
name: "Simple Chatbot Demo"
description: "AI-to-AI conversation demo"

inputs:
  topic:
    type: string
    required: true

steps:
  - id: user_question
    action: |
      As a curious student, ask an interesting question about {{topic}}.
      Be specific and thoughtful in your question.
    model: "openai/gpt-4o-mini"
    
  - id: bot_answer
    action: |
      As a knowledgeable teacher, provide a clear and helpful answer to:
      "{{user_question.result}}"
      
      Give a comprehensive response with examples.
    model: "anthropic/claude-3-haiku-20240307"
    depends_on: [user_question]
    
  - id: user_followup
    action: |
      As the student, ask a follow-up question based on the answer:
      "{{bot_answer.result}}"
      
      Show that you understood and want to learn more.
    model: "openai/gpt-4o-mini"
    depends_on: [bot_answer]
    
  - id: bot_clarification
    action: |
      Continue the educational discussion by answering:
      "{{user_followup.result}}"
      
      Provide additional insights and practical examples.
    model: "anthropic/claude-3-haiku-20240307"
    depends_on: [user_followup]
    
  - id: save_conversation
    action: |
      Save the conversation to examples/output/chat_{{topic | replace(' ', '_') | lower}}.md:
      
      # AI Conversation: {{topic}}
      
      *Generated on: {{execution.timestamp}}*
      
      ## Participants
      - **Student**: OpenAI GPT-4o-mini
      - **Teacher**: Anthropic Claude 3 Haiku
      
      ## Conversation
      
      **Student:** {{user_question.result}}
      
      **Teacher:** {{bot_answer.result}}
      
      **Student:** {{user_followup.result}}
      
      **Teacher:** {{bot_clarification.result}}
      
      ---
      *This conversation was simulated between AI models for demonstration purposes.*
    depends_on: [bot_clarification]

outputs:
  conversation_file: "examples/output/chat_{{topic | replace(' ', '_') | lower}}.md"
'''
    
    inputs = {"topic": "quantum computing basics"}
    
    try:
        pipeline = await compiler.compile(yaml_content, inputs)
        results = await control_system.execute_pipeline(pipeline)
        
        print("\n‚úÖ Conversation completed successfully!")
        print(f"\nStudent's Question:")
        print(results.get('user_question', 'No question'))
        print(f"\nTeacher's Answer (first 300 chars):")
        print(results.get('bot_answer', 'No answer')[:300] + "...")
        
        return True, results
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False, None


async def test_creative_writing():
    """Simple creative writing test."""
    print("\n" + "="*60)
    print("Testing Simple Creative Writing")
    print("="*60)
    
    model_registry = ModelRegistry()
    model = AnthropicModel(model_name="claude-3-sonnet-20240229")
    model_registry.register_model(model)
    
    control_system = ModelBasedControlSystem(model_registry)
    compiler = YAMLCompiler()
    
    yaml_content = '''
name: "Flash Fiction Writer"
description: "Create a short story"
model: "anthropic/claude-3-sonnet-20240229"

inputs:
  theme:
    type: string
    required: true
  genre:
    type: string
    default: "science fiction"

steps:
  - id: create_story
    action: |
      Write a flash fiction story (500-750 words) with:
      
      Theme: {{theme}}
      Genre: {{genre}}
      
      Include:
      1. A compelling opening that hooks the reader
      2. A well-developed main character
      3. A clear conflict or challenge
      4. Vivid descriptions and dialogue
      5. A satisfying conclusion with a twist
      
      Make it engaging and thought-provoking.
      
  - id: add_title
    action: |
      Create a compelling title for this story:
      
      {{create_story.result}}
      
      The title should be:
      1. Memorable and intriguing
      2. Related to the theme
      3. No more than 5 words
    depends_on: [create_story]
    
  - id: save_story
    action: |
      Save the story to examples/output/story_{{theme | replace(' ', '_') | lower}}.md:
      
      # {{add_title.result}}
      
      *A {{genre}} flash fiction*
      *Generated on: {{execution.timestamp}}*
      *Model: Anthropic Claude 3 Sonnet*
      
      ---
      
      {{create_story.result}}
      
      ---
      
      **Theme:** {{theme}}
      **Genre:** {{genre}}
      **Word Count:** ~600 words
      
      *Generated by Orchestrator Creative Writing Assistant*
    depends_on: [create_story, add_title]

outputs:
  title: "{{add_title.result}}"
  story: "{{create_story.result}}"
  file_path: "examples/output/story_{{theme | replace(' ', '_') | lower}}.md"
'''
    
    inputs = {
        "theme": "AI discovering emotions",
        "genre": "science fiction"
    }
    
    try:
        pipeline = await compiler.compile(yaml_content, inputs)
        results = await control_system.execute_pipeline(pipeline)
        
        print("\n‚úÖ Story created successfully!")
        print(f"\nTitle: {results.get('add_title', 'Untitled')}")
        print(f"\nStory Opening (first 300 chars):")
        print(results.get('create_story', 'No story')[:300] + "...")
        
        return True, results
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False, None


async def main():
    """Run simple tests and examine outputs."""
    print("Running Simple Example Tests")
    print("Testing core functionality with clean examples")
    print("-" * 60)
    
    # Ensure output directory exists
    Path("examples/output").mkdir(parents=True, exist_ok=True)
    
    # Check API keys
    keys_status = {
        "Google": bool(os.getenv("GOOGLE_API_KEY")),
        "OpenAI": bool(os.getenv("OPENAI_API_KEY")),
        "Anthropic": bool(os.getenv("ANTHROPIC_API_KEY"))
    }
    
    print("\nAPI Key Status:")
    for api, available in keys_status.items():
        print(f"  {api}: {'‚úÖ Available' if available else '‚ùå Missing'}")
    
    # Run tests
    tests = [
        ("Research Pipeline", test_research_simple),
        ("Chatbot Conversation", test_chatbot_simple),
        ("Creative Writing", test_creative_writing)
    ]
    
    results_summary = []
    
    for name, test_func in tests:
        success, results = await test_func()
        results_summary.append({
            "test": name,
            "success": success,
            "has_output": results is not None
        })
    
    # Summary
    print("\n" + "="*60)
    print("TEST SUMMARY")
    print("="*60)
    
    for result in results_summary:
        status = "‚úÖ PASS" if result["success"] else "‚ùå FAIL"
        print(f"{result['test']}: {status}")
    
    print("\nüìÅ Check examples/output/ for the generated markdown files!")
    print("\nThese files contain the full outputs from each pipeline.")


if __name__ == "__main__":
    asyncio.run(main())