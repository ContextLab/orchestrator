#!/usr/bin/env python3
"""
Test single pipeline with file output debugging.
"""

import asyncio
import os
from pathlib import Path
from datetime import datetime
import json

from orchestrator.compiler.yaml_compiler import YAMLCompiler
from orchestrator.control_systems.model_based_control_system import ModelBasedControlSystem
from orchestrator.models.model_registry import ModelRegistry
from orchestrator.integrations.google_model import GoogleModel
from orchestrator.integrations.anthropic_model import AnthropicModel
from orchestrator.integrations.openai_model import OpenAIModel


async def test_pipeline_with_output():
    """Test a single pipeline and check file output."""
    print("üß™ Testing Pipeline File Output")
    print("="*80)
    
    # Setup models
    registry = ModelRegistry()
    
    if os.getenv("GOOGLE_API_KEY"):
        registry.register_model(GoogleModel(model_name="gemini-1.5-flash"))
    if os.getenv("ANTHROPIC_API_KEY"):
        registry.register_model(AnthropicModel(model_name="claude-3-haiku-20240307"))
    if os.getenv("OPENAI_API_KEY"):
        registry.register_model(OpenAIModel(model_name="gpt-4o-mini"))
    
    # Create a simple test pipeline with explicit file writing
    yaml_content = '''name: "Test File Output Pipeline"
description: "Test pipeline that explicitly saves output"
model: "google/gemini-1.5-flash"

inputs:
  topic:
    type: string
    required: true

steps:
  - id: generate_content
    action: |
      Write a short article about: {{topic}}
      
      Include:
      1. Introduction
      2. Main points
      3. Conclusion
    
  - id: save_to_file
    action: |
      file_system.write_file("examples/output/test_{{topic | replace(' ', '_') | lower}}.md", """# {{topic}}

*Generated on: {{execution.timestamp}}*

{{generate_content.result}}

---
*Generated by Test Pipeline*
""")
    depends_on: [generate_content]

outputs:
  content: "{{generate_content.result}}"
  file_path: "examples/output/test_{{topic | replace(' ', '_') | lower}}.md"
'''
    
    # Ensure output directory exists
    Path("examples/output").mkdir(parents=True, exist_ok=True)
    
    # Setup
    control_system = ModelBasedControlSystem(registry)
    compiler = YAMLCompiler()
    
    # Test input
    inputs = {
        "topic": "The Benefits of Test Driven Development"
    }
    
    try:
        # Compile and run
        print(f"Inputs: {json.dumps(inputs, indent=2)}")
        pipeline = await compiler.compile(yaml_content, inputs)
        
        print(f"‚úì Pipeline compiled with {len(pipeline.tasks)} tasks")
        for task in pipeline.tasks:
            print(f"  - Task: {task.id}")
            print(f"    Action: {task.action[:50]}...")
        
        results = await control_system.execute_pipeline(pipeline)
        
        print(f"\n‚úÖ Pipeline executed successfully!")
        print(f"\nResults:")
        for task_id, result in results.items():
            print(f"\n{task_id}:")
            if isinstance(result, str):
                print(result[:200] + "..." if len(result) > 200 else result)
            else:
                print(result)
        
        # Check if file was created
        expected_file = Path("examples/output/test_the_benefits_of_test_driven_development.md")
        if expected_file.exists():
            print(f"\n‚úÖ File successfully created: {expected_file}")
            print(f"   Size: {expected_file.stat().st_size} bytes")
        else:
            print(f"\n‚ùå Expected file not created: {expected_file}")
            
            # List any files that were created
            output_files = list(Path("examples/output").glob("test_*.md"))
            if output_files:
                print("\nFiles found:")
                for f in output_files:
                    print(f"  - {f}")
        
    except Exception as e:
        print(f"\n‚ùå Error: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_pipeline_with_output())