#!/usr/bin/env python3
"""
Fix YAML syntax errors and add proper save steps to all pipelines.
"""

import re
from pathlib import Path
import yaml

def fix_yaml_syntax_errors():
    """Fix common YAML syntax errors."""
    fixes_needed = [
        # Fix content_simple.yaml model line
        ("examples/working/content_simple.yaml", 
         r'model: "huggingface/meta-llama/Llama-3.2-3B-Instruct"\.2"',
         'model: "huggingface/meta-llama/Llama-3.2-3B-Instruct"'),
        
        # Fix multi_model_pipeline.yaml
        ("examples/multi_model_pipeline.yaml",
         r'requires_model: "openai/gpt-4o"\.5-turbo',
         'requires_model: "openai/gpt-4o"'),
    ]
    
    for filepath, pattern, replacement in fixes_needed:
        if Path(filepath).exists():
            content = Path(filepath).read_text()
            fixed_content = re.sub(pattern, replacement, content)
            Path(filepath).write_text(fixed_content)
            print(f"‚úÖ Fixed syntax in {filepath}")


def create_proper_save_step(pipeline_name, main_output_step=None):
    """Create a properly formatted save step."""
    clean_name = pipeline_name.replace('_', ' ').title()
    
    if main_output_step:
        save_step = f'''
  - id: save_output
    action: |
      Save the following content to examples/output/{pipeline_name}.md:
      
      # {clean_name}
      
      *Generated on: {{{{execution.timestamp}}}}*
      *Pipeline: {pipeline_name}*
      
      ## Output
      
      {{{{{main_output_step}.result}}}}
      
      ---
      *Generated by Orchestrator {clean_name} Pipeline*
    depends_on: [{main_output_step}]'''
    else:
        # Generic save step that saves all results
        save_step = f'''
  - id: save_output
    action: |
      Save the complete pipeline output to examples/output/{pipeline_name}.md:
      
      # {clean_name}
      
      *Generated on: {{{{execution.timestamp}}}}*
      *Pipeline: {pipeline_name}*
      
      ## Results Summary
      
      This pipeline completed successfully with the following outputs:
      
      ### Pipeline Steps
      {{% for step in steps if step.id != 'save_output' %}}
      - **{{{{step.id}}}}**: Completed
      {{% endfor %}}
      
      ### Key Outputs
      
      The pipeline has generated comprehensive results for {clean_name.lower()}.
      
      ---
      *Generated by Orchestrator Pipeline*
    depends_on: []'''
    
    return save_step


def add_save_steps_to_pipelines():
    """Add save steps to all pipelines that need them."""
    
    # Pipeline configurations with their main output steps
    pipeline_configs = {
        "research_assistant.yaml": "generate_report",
        "content_creation_pipeline.yaml": "final_output",
        "creative_writing_assistant.yaml": "complete_story",
        "financial_analysis_bot.yaml": "generate_report",
        "data_processing_workflow.yaml": "generate_insights",
        "code_analysis_suite.yaml": "generate_report",
        "customer_support_automation.yaml": "final_response",
        "automated_testing_system.yaml": "test_report",
        "document_intelligence.yaml": "final_analysis",
        "multi_agent_collaboration.yaml": "final_consensus",
        "scalable_customer_service_agent.yaml": "agent_response",
        "model_requirements_pipeline.yaml": "requirements_summary",
        "research_simple.yaml": "generate_report",
        "content_simple.yaml": "optimize_content",
        "creative_simple.yaml": "write_story",
        "analysis_simple.yaml": "suggest_improvements",
        "data_simple.yaml": "generate_insights",
    }
    
    for yaml_file, main_output in pipeline_configs.items():
        # Check both locations
        paths = [
            Path(f"examples/{yaml_file}"),
            Path(f"examples/working/{yaml_file}")
        ]
        
        for filepath in paths:
            if filepath.exists():
                content = filepath.read_text()
                
                # Check if save step already exists
                if 'save_output' in content or 'save_conversation' in content:
                    print(f"‚è≠Ô∏è  {filepath.name} already has save step")
                    continue
                
                # Parse pipeline name
                pipeline_name = filepath.stem
                
                # Create save step
                save_step = create_proper_save_step(pipeline_name, main_output)
                
                # Find where to insert (before outputs section)
                lines = content.split('\n')
                insert_idx = len(lines)
                
                for i, line in enumerate(lines):
                    if line.strip().startswith('outputs:'):
                        insert_idx = i
                        break
                
                # Insert save step
                lines.insert(insert_idx, save_step)
                
                # Write back
                filepath.write_text('\n'.join(lines))
                print(f"‚úÖ Added save step to {filepath}")


def fix_interactive_chatbot_save():
    """Fix the interactive chatbot demo save step."""
    chatbot_file = Path("examples/interactive_chat_bot_demo.yaml")
    if chatbot_file.exists():
        content = chatbot_file.read_text()
        
        # Fix the save_conversation step to use proper format
        fixed_content = re.sub(
            r'Write the formatted conversation to a markdown file at:\s*\n\s*examples/output/chatbot_demo_.*?\.md\s*\n\s*Content to save:',
            'Save the following content to examples/output/interactive_chat_bot_demo.md:\n      \n',
            content,
            flags=re.MULTILINE | re.DOTALL
        )
        
        chatbot_file.write_text(fixed_content)
        print("‚úÖ Fixed interactive_chat_bot_demo.yaml save step")


def fix_yaml_structure_errors():
    """Fix YAML structure errors in specific files."""
    
    # Fix multi_model_pipeline.yaml
    multi_model = Path("examples/multi_model_pipeline.yaml")
    if multi_model.exists():
        content = multi_model.read_text()
        
        # The save_output step is misplaced, need to restructure
        lines = content.split('\n')
        fixed_lines = []
        skip_save = False
        
        for i, line in enumerate(lines):
            if 'id: save_output' in line and i < 20:  # If save_output appears too early
                skip_save = True
                continue
            if skip_save and line.strip() and not line.strip().startswith('-'):
                if 'name: Fetch Dataset' in line:
                    skip_save = False
                else:
                    continue
            
            fixed_lines.append(line)
        
        # Add proper save step at the end
        if 'save_output' not in '\n'.join(fixed_lines):
            save_step = create_proper_save_step('multi_model_pipeline', 'quality_check')
            # Insert before outputs
            for i, line in enumerate(fixed_lines):
                if line.strip().startswith('outputs:'):
                    fixed_lines.insert(i, save_step)
                    break
        
        multi_model.write_text('\n'.join(fixed_lines))
        print("‚úÖ Fixed multi_model_pipeline.yaml structure")
    
    # Fix simple_pipeline.yaml
    simple = Path("examples/simple_pipeline.yaml")
    if simple.exists():
        content = simple.read_text()
        
        # Similar fix for simple_pipeline
        lines = content.split('\n')
        fixed_lines = []
        skip_save = False
        
        for i, line in enumerate(lines):
            if 'id: save_output' in line and i < 20:
                skip_save = True
                continue
            if skip_save and 'name: Generate Content' in line:
                skip_save = False
            if not skip_save:
                fixed_lines.append(line)
        
        # Add proper save step
        if 'save_output' not in '\n'.join(fixed_lines):
            save_step = create_proper_save_step('simple_pipeline', 'generate_content')
            for i, line in enumerate(fixed_lines):
                if line.strip().startswith('outputs:'):
                    fixed_lines.insert(i, save_step)
                    break
        
        simple.write_text('\n'.join(fixed_lines))
        print("‚úÖ Fixed simple_pipeline.yaml structure")


def main():
    """Run all fixes."""
    print("üîß Fixing YAML Files and Adding Save Steps")
    print("="*60)
    
    print("\n1Ô∏è‚É£ Fixing syntax errors...")
    fix_yaml_syntax_errors()
    
    print("\n2Ô∏è‚É£ Fixing YAML structure errors...")
    fix_yaml_structure_errors()
    
    print("\n3Ô∏è‚É£ Fixing interactive chatbot save...")
    fix_interactive_chatbot_save()
    
    print("\n4Ô∏è‚É£ Adding save steps to all pipelines...")
    add_save_steps_to_pipelines()
    
    print("\n‚ú® All fixes complete!")


if __name__ == "__main__":
    main()