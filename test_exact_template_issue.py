#!/usr/bin/env python3
"""Test the exact template content from save_report."""

import asyncio
from pathlib import Path
import sys

sys.path.insert(0, str(Path(__file__).parent))

from src.orchestrator.core.template_manager import TemplateManager

def test_save_report_template():
    """Test the exact template from save_report."""
    
    # Create template manager
    tm = TemplateManager(debug_mode=True)
    
    # Register context like in the actual pipeline
    tm.register_context("topic", "test topic")
    tm.register_context("execution", {
        "timestamp": "2025-08-01 13:00:00",
        "date": "2025-08-01"
    })
    
    # Register step results
    tm.register_context("search_topic", {
        "total_results": 10,
        "results": [
            {"title": "Result 1", "url": "http://example1.com", "snippet": "Snippet 1"},
            {"title": "Result 2", "url": "http://example2.com", "snippet": "Snippet 2"}
        ]
    })
    
    tm.register_context("deep_search", {
        "total_results": 5,
        "results": [
            {"title": "Deep 1", "url": "http://deep1.com", "snippet": "Deep snippet 1"}
        ]
    })
    
    tm.register_context("analyze_findings", {
        "result": "This is the analysis result."
    })
    
    tm.register_context("generate_recommendations", {
        "result": "These are the recommendations."
    })
    
    tm.register_context("extract_content", {
        "word_count": 0
    })
    
    # The exact template from save_report
    template = """# Research Report: {{ topic }}

**Generated on:** {{ execution.timestamp }}
**Total Sources Analyzed:** {{ search_topic.total_results + deep_search.total_results }}

---

## Analysis

{{ analyze_findings.result }}

## Strategic Recommendations

{{ generate_recommendations.result }}

## Search Results

The analysis is based on {{ search_topic.total_results + deep_search.total_results }} sources discovered through systematic web searches. The primary search focused on recent developments in {{ topic }}, while the technical search targeted research papers and implementation details.

### Primary Sources (Top {{ search_topic.results[:10] | length }} of {{ search_topic.total_results }})
{% for result in search_topic.results[:10] %}
{{ loop.index }}. **[{{ result.title }}]({{ result.url }})**
   - {{ result.snippet }}
{% endfor %}

### Technical Sources ({{ deep_search.total_results }} results)
{% for result in deep_search.results[:5] %}
{{ loop.index }}. **[{{ result.title }}]({{ result.url }})**
   - {{ result.snippet }}
{% endfor %}

## Extracted Content Analysis

{% if extract_content.word_count and extract_content.word_count > 0 %}
**Primary Source:** {{ extract_content.title }}
**URL:** {{ extract_content.url }}
**Content Summary:** Successfully extracted {{ extract_content.word_count }} words from the primary source.
{% else %}
Content extraction was not successful or was skipped.
{% endif %}

## Methodology

This comprehensive research report was generated through a multi-stage process combining automated web searches, content extraction, and AI-powered analysis. The methodology ensures broad coverage of current developments while maintaining analytical depth.

### Search Strategy
- **Primary search**: "{{ topic }} latest developments" (yielded {{ search_topic.total_results }} results)
- **Technical search**: "{{ topic }} research papers technical details implementation" (yielded {{ deep_search.total_results }} results)
- **Content extraction**: Automated extraction from primary sources when accessible
- **Analysis performed**: {{ execution.timestamp }}

## References

All sources were accessed on {{ execution.date }} and are listed in order of relevance.

{% for result in search_topic.results[:5] %}
{{ loop.index }}. {{ result.title }}. Available at: {{ result.url }}
{% endfor %}
{% for result in deep_search.results[:5] %}
{{ loop.index + 5 }}. {{ result.title }}. Available at: {{ result.url }}
{% endfor %}

---
*This report was automatically generated by the Orchestrator Advanced Research Pipeline v2.0*
"""
    
    print("Testing template rendering...")
    print("=" * 60)
    
    # Test has_templates
    print(f"Has templates: {tm.has_templates(template)}")
    
    # Test render
    try:
        rendered = tm.render(template)
        print("Render succeeded!")
        print(f"First 500 chars of rendered:")
        print("-" * 60)
        print(rendered[:500])
        print("-" * 60)
        
        if "{{" in rendered:
            print("\n❌ Templates NOT rendered!")
        else:
            print("\n✅ Templates rendered!")
            
    except Exception as e:
        print(f"Render failed with error: {e}")
        import traceback
        traceback.print_exc()
    
    # Test deep_render
    print("\n\nTesting deep_render...")
    print("=" * 60)
    try:
        deep_rendered = tm.deep_render(template)
        print("Deep render succeeded!")
        
        if deep_rendered == template:
            print("❌ Deep render returned original unchanged!")
        else:
            print("✅ Deep render modified the template!")
            
        if "{{" in deep_rendered:
            print("❌ Templates still present after deep_render!")
        else:
            print("✅ All templates rendered!")
            
    except Exception as e:
        print(f"Deep render failed with error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_save_report_template()