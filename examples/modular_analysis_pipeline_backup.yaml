# Modular Analysis Pipeline with Sub-Pipelines
# Demonstrates using sub-pipelines for modular workflow design
id: modular_analysis
name: Modular Analysis Pipeline
description: Main pipeline that orchestrates multiple analysis sub-pipelines
version: "1.0.0"

parameters:
  dataset:
    type: string
    default: "input/dataset.csv"
  analysis_types:
    type: array
    default: ["statistical", "sentiment", "trend"]
  output_format:
    type: string
    default: "pdf"

steps:
  - id: load_data
    tool: filesystem
    action: read
    parameters:
      path: "examples/outputs/modular_analysis/{{ parameters.dataset }}"
    
  - id: data_preprocessing
    tool: pipeline-executor
    action: execute
    parameters:
      pipeline: |
        id: data_preprocessing_sub
        name: Data Preprocessing Sub-Pipeline
        steps:
          - id: clean_data
            tool: data-processing
            action: clean
            parameters:
              data: "{{ inputs.raw_data }}"
              remove_duplicates: true
              handle_missing: "interpolate"
          
          - id: normalize_data
            tool: data-processing
            action: transform
            parameters:
              data: "{{ clean_data.result }}"
              operation:
                type: "normalize"
                method: "min-max"
        
        outputs:
          processed_data: "{{ normalize_data.result }}"
      inputs:
        raw_data: "{{ load_data.result.content }}"
      wait_for_completion: true
    dependencies:
      - load_data
    
  - id: statistical_analysis
    tool: pipeline-executor
    action: execute
    parameters:
      pipeline: "examples/sub_pipelines/statistical_analysis.yaml"
      inputs:
        data: "{{ data_preprocessing.outputs.processed_data }}"
        confidence_level: 0.95
      output_mapping:
        statistics: "statistical_results"
        summary: "statistical_summary"
    dependencies:
      - data_preprocessing
    condition: "'statistical' in {{ parameters.analysis_types }}"
    
  - id: sentiment_analysis
    tool: pipeline-executor
    action: execute
    parameters:
      pipeline: "examples/sub_pipelines/sentiment_analysis.yaml"
      inputs:
        data: "{{ data_preprocessing.outputs.processed_data }}"
        text_column: "comments"
      output_mapping:
        sentiment_scores: "sentiment_results"
        overall_sentiment: "sentiment_summary"
    dependencies:
      - data_preprocessing
    condition: "'sentiment' in {{ parameters.analysis_types }}"
    
  - id: trend_analysis
    tool: pipeline-executor
    action: execute
    parameters:
      pipeline: "examples/sub_pipelines/trend_analysis.yaml"
      inputs:
        data: "{{ data_preprocessing.outputs.processed_data }}"
        time_column: "timestamp"
        value_columns: ["sales", "revenue"]
      output_mapping:
        trends: "trend_results"
        forecasts: "trend_forecasts"
    dependencies:
      - data_preprocessing
    condition: "'trend' in {{ parameters.analysis_types }}"
    
  - id: combine_results
    tool: data-processing
    action: merge
    parameters:
      datasets:
        - name: "statistical"
          data: "{{ statistical_analysis.outputs.statistical_results | default({}) }}"
        - name: "sentiment"
          data: "{{ sentiment_analysis.outputs.sentiment_results | default({}) }}"
        - name: "trend"
          data: "{{ trend_analysis.outputs.trend_results | default({}) }}"
      merge_strategy: "combine"
    dependencies:
      - statistical_analysis
      - sentiment_analysis
      - trend_analysis
    
  - id: generate_visualizations
    tool: pipeline-executor
    action: execute
    parameters:
      pipeline: |
        id: visualization_sub
        name: Visualization Generation
        steps:
          - id: create_charts
            tool: visualization
            action: create_charts
            parameters:
              data: "{{ inputs.analysis_results }}"
              chart_types: <AUTO>Based on the data structure, select appropriate visualizations</AUTO>
              
          - id: create_dashboard
            tool: visualization
            action: create_dashboard
            parameters:
              charts: "{{ create_charts.charts }}"
              layout: "grid"
              title: "Analysis Dashboard"
        
        outputs:
          dashboard_url: "{{ create_dashboard.url }}"
          chart_files: "{{ create_charts.files }}"
      inputs:
        analysis_results: "{{ combine_results.result }}"
      error_handling: "continue"
      retry_count: 2
    dependencies:
      - combine_results
    
  - id: compile_report
    tool: report-generator
    action: generate
    parameters:
      title: "Comprehensive Analysis Report"
      sections:
        - title: "Executive Summary"
          content: <AUTO>Summarize key findings from all analyses</AUTO>
          
        - title: "Data Overview"
          content: |
            Dataset: {{ parameters.dataset }}
            Preprocessing steps applied: cleaning, normalization
            Analysis types performed: {{ parameters.analysis_types | join(', ') }}
            
        - title: "Statistical Analysis"
          content: "{{ statistical_analysis.outputs.statistical_summary | default('Not performed') }}"
          condition: "'statistical' in {{ parameters.analysis_types }}"
          
        - title: "Sentiment Analysis"
          content: "{{ sentiment_analysis.outputs.sentiment_summary | default('Not performed') }}"
          condition: "'sentiment' in {{ parameters.analysis_types }}"
          
        - title: "Trend Analysis"
          content: |
            ## Identified Trends
            {{ trend_analysis.outputs.trend_results | json }}
            
            ## Forecasts
            {{ trend_analysis.outputs.trend_forecasts | json }}
          condition: "'trend' in {{ parameters.analysis_types }}"
          
        - title: "Visualizations"
          content: |
            Dashboard available at: {{ generate_visualizations.outputs.dashboard_url }}
            Generated charts: {{ generate_visualizations.outputs.chart_files | length }} files
      
      include_visualizations: true
      visualization_files: "{{ generate_visualizations.outputs.chart_files }}"
    dependencies:
      - generate_visualizations
    
  - id: export_report
    tool: pdf-compiler
    action: compile
    parameters:
      content: "{{ compile_report.report }}"
      output_path: "examples/outputs/modular_analysis/output/analysis_report.{{ parameters.output_format }}"
      format: "{{ parameters.output_format }}"
      include_toc: true
      include_timestamp: true
    dependencies:
      - compile_report
    
  - id: cleanup_temp_files
    tool: filesystem
    action: delete
    parameters:
      paths:
        - "temp/*.tmp"
        - "cache/*.cache"
      recursive: false
    dependencies:
      - export_report
    condition: "{{ export_report.success }}"

  # Save pipeline results
  - id: save_results
    tool: filesystem
    action: write
    parameters:
      path: "examples/outputs/modular_analysis/results_{{ execution.timestamp | slugify }}.md"
      content: |
        # Modular Analysis Pipeline Results
        
        **Date:** {{ execution.timestamp }}
        **Pipeline ID:** modular_analysis
        
        ## Execution Summary
        
        Pipeline completed successfully.
        
        ---
        *Generated by Modular Analysis Pipeline*
    dependencies:
      - cleanup_temp_files

outputs:
  report_path: "examples/outputs/modular_analysis/{{ export_report.output_path }}"
  dashboard_url: "{{ generate_visualizations.outputs.dashboard_url }}"
  analysis_summary: "{{ compile_report.summary }}"
  processing_time: "{{ execution_time }}"