# Recursive Data Processing Pipeline
# Demonstrates recursive pipeline execution with termination conditions
id: recursive_data_processor
name: Recursive Data Processing Pipeline
description: Process data recursively until quality threshold is met
version: "1.0.0"

parameters:
  input_data:
    type: string
    default: "raw_data.csv"
  quality_threshold:
    type: number
    default: 0.95
  max_iterations:
    type: integer
    default: 10

steps:
  - id: initialize
    tool: recursion-control
    action: get_state
    parameters:
      context_id: "{{ execution_id }}"
    
  - id: set_initial_data
    tool: recursion-control
    action: update_state
    parameters:
      state_key: current_data
      state_value: "{{ parameters.input_data }}"
      context_id: "{{ execution_id }}"
    dependencies:
      - initialize
    condition: "{{ not initialize.state.get('current_data') }}"
    
  - id: increment_iteration
    tool: recursion-control
    action: update_state
    parameters:
      state_key: iteration
      increment: 1
      context_id: "{{ execution_id }}"
    dependencies:
      - initialize
    
  - id: process_data
    tool: data-processing
    action: transform
    parameters:
      data: "{{ initialize.state.get('current_data', parameters.input_data) }}"
      format: "csv"
      operation:
        type: <AUTO>Based on iteration {{ increment_iteration.new_value }}, apply appropriate data cleaning and enhancement</AUTO>
    dependencies:
      - increment_iteration
    
  - id: validate_quality
    tool: validation
    action: validate
    parameters:
      data: "{{ process_data.result }}"
      schema:
        type: "quality_check"
        metrics: ["completeness", "accuracy", "consistency"]
    dependencies:
      - process_data
    
  - id: check_termination
    tool: recursion-control
    action: check_condition
    parameters:
      condition: |
        state.get('quality_score', 0) >= {{ parameters.quality_threshold }} or 
        state.get('iteration', 0) >= {{ parameters.max_iterations }}
      context_id: "{{ execution_id }}"
      max_iterations: "{{ parameters.max_iterations }}"
    dependencies:
      - validate_quality
    
  - id: update_quality_score
    tool: recursion-control
    action: update_state
    parameters:
      state_key: quality_score
      state_value: "{{ validate_quality.metrics.overall_score }}"
      context_id: "{{ execution_id }}"
    dependencies:
      - validate_quality
    
  - id: update_current_data
    tool: recursion-control
    action: update_state
    parameters:
      state_key: current_data
      state_value: "{{ process_data.result }}"
      context_id: "{{ execution_id }}"
    dependencies:
      - process_data
    
  - id: recurse
    tool: pipeline-executor
    action: execute
    parameters:
      pipeline: recursive_data_processor
      inputs:
        parameters:
          input_data: "{{ process_data.result }}"
          quality_threshold: "{{ parameters.quality_threshold }}"
          max_iterations: "{{ parameters.max_iterations }}"
        execution_id: "{{ execution_id }}"
      inherit_context: true
      wait_for_completion: true
    dependencies:
      - check_termination
      - update_quality_score
      - update_current_data
    condition: "not {{ check_termination.should_terminate }}"
    
  - id: finalize_results
    tool: filesystem
    action: write
    parameters:
      path: "{{ output_path }}/processed_data_final.csv"
      content: "{{ update_current_data.full_state.current_data }}"
    dependencies:
      - check_termination
    condition: "{{ check_termination.should_terminate }}"
    
  - id: generate_report
    tool: filesystem
    action: write
    parameters:
      path: "{{ output_path }}/recursive_processing_report.md"
      content: |
        # Recursive Data Processing Results
        
        ## Processing Summary
        - Total Iterations: {{ increment_iteration.new_value }}
        - Final Quality Score: {{ update_quality_score.full_state.quality_score }}
        - Quality Threshold: {{ parameters.quality_threshold }}
        - Termination Reason: {{ 'Quality threshold met' if update_quality_score.full_state.quality_score >= parameters.quality_threshold else 'Maximum iterations reached' }}
        
        ## Quality Metrics History
        {{ validate_quality.metrics | json }}
        
        ## Output
        - Final processed data saved to: processed_data_final.csv
    dependencies:
      - finalize_results

outputs:
  final_quality_score: "{{ update_quality_score.full_state.quality_score }}"
  iterations_performed: "{{ increment_iteration.new_value }}"
  output_file: "processed_data_final.csv"