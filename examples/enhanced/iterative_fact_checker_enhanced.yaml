id: iterative_fact_checker
name: Iterative Fact Checker
description: Iteratively processes documents to ensure all claims have proper references
version: 2.0.0
parameters:
  input_document: &id001
    type: string
    default: test_climate_document.md
    description: Path to the document to fact-check
  quality_threshold: &id002
    type: number
    default: 0.95
    description: Minimum percentage of claims that must have references
  max_iterations: &id003
    type: integer
    default: 5
    description: Maximum number of improvement iterations
steps:
- id: initialize_vars
  action: generate
  parameters:
    prompt: 'Initialize fact-checking process for document: {{ parameters.input_document
      }}'
    model: claude-sonnet-4-20250514
    max_tokens: 50
- id: load_initial_doc
  tool: filesystem
  action: read
  parameters:
    path: '{{ parameters.input_document }}'
  dependencies:
  - initialize_vars
- id: fact_check_loop
  while: 'true'
  max_iterations: 3
  dependencies:
  - load_initial_doc
  steps:
  - id: load_document
    tool: filesystem
    action: read
    parameters:
      path: '{{ parameters.input_document }}'
  - id: extract_claims
    action: generate
    parameters:
      prompt: "Analyze this document and extract all factual claims and their references.\n\
        \nDocument:\n{{ load_document.content }}\n\nFor each claim, provide:\n1. The\
        \ claim text\n2. Whether it has a reference/citation (true/false)\n3. If it\
        \ has a reference, extract the reference URL\n\nPlease respond in the following\
        \ JSON format:\n{\n  \"claims\": [\n    {\n      \"text\": \"claim text here\"\
        ,\n      \"has_reference\": true/false,\n      \"reference_url\": \"URL if\
        \ available\"\n    }\n  ],\n  \"total_claims\": number,\n  \"claims_with_references\"\
        : number,\n  \"percentage_referenced\": decimal_percentage\n}\n\nReturn ONLY\
        \ the JSON, no other text.\n"
      model: claude-sonnet-4-20250514
      max_tokens: 2000
  - id: verify_refs
    action: generate
    parameters:
      prompt: 'Verify which of these reference URLs are valid and accessible:

        {% for claim in (extract_claims.result | from_json).claims %}

        {% if claim.has_reference and claim.reference_url %}

        - {{ claim.reference_url }}

        {% endif %}

        {% endfor %}


        For each URL, indicate if it''s valid/accessible or broken.

        '
      model: claude-sonnet-4-20250514
      max_tokens: 1000
  - id: find_citations
    action: generate
    parameters:
      prompt: 'Find reliable sources and citations for these unreferenced claims:


        {% for claim in (extract_claims.result | from_json).claims %}

        {% if not claim.has_reference %}

        - {{ claim.text }}

        {% endif %}

        {% endfor %}


        For each claim, provide:

        1. A reliable source URL

        2. The source title

        3. A brief explanation of why this source supports the claim


        Format as a list with clear citations.

        '
      model: claude-sonnet-4-20250514
      max_tokens: 2000
  - id: update_document
    action: generate
    parameters:
      prompt: 'Update this document by:

        1. Adding citations for all unreferenced claims using the sources found

        2. Fixing any broken references (URLs that returned errors)

        3. Formatting all references consistently as footnotes at the end


        Original document:

        {{ load_document.content }}


        Claims analysis:

        {{ extract_claims }}


        Reference verification results:

        {{ verify_refs }}


        New citations to add:

        {{ find_citations.result }}


        Return the complete updated document with all improvements.

        '
      model: claude-sonnet-4-20250514
      max_tokens: 5000
  - id: save_iteration
    tool: filesystem
    action: write
    parameters:
      path: '{{ output_path }}/iteration_{{ $iteration }}_document.md'
      content: '{{ update_document.result }}'
  - id: update_score
    action: generate
    parameters:
      prompt: 'The document now has {{ (extract_claims.result | from_json).claims_with_references
        }} out of {{ (extract_claims.result | from_json).total_claims }} claims with
        references.

        This is {{ (extract_claims.result | from_json).percentage_referenced }}% referenced.

        Output just the decimal percentage (e.g., 0.95 for 95%).

        '
      model: claude-sonnet-4-20250514
      max_tokens: 10
- id: save_final_document
  tool: filesystem
  action: write
  parameters:
    path: '{{ output_path }}/{{ parameters.input_document | basename | regex_replace(''\.md$'',
      '''') }}_verified.md'
    content: '{% if fact_check_loop.iterations %}

      {{ fact_check_loop.iterations[-1].update_document.result }}

      {% else %}

      {{ load_initial_doc.content }}

      {% endif %}

      '
  dependencies:
  - fact_check_loop
- id: generate_report
  tool: filesystem
  action: write
  parameters:
    path: '{{ output_path }}/fact_checking_report.md'
    content: "# Fact-Checking Report\n\n## Document Information\n- **Source Document**:\
      \ {{ parameters.input_document }}\n- **Date Processed**: {{ execution.timestamp\
      \ }}\n\n## Processing Summary\n- **Total Iterations**: {{ fact_check_loop.iteration_count\
      \ | default(1) }}\n- **Quality Threshold**: {{ parameters.quality_threshold\
      \ * 100 }}%\n- **Final Quality Score**: {% if fact_check_loop.iterations %}{{\
      \ (fact_check_loop.iterations[-1].extract_claims.result | from_json).percentage_referenced\
      \ }}%{% else %}N/A{% endif %}\n\n## Iteration Details\n{% for iteration in fact_check_loop.iterations\
      \ %}\n### Iteration {{ loop.index }}\n- Claims analyzed: {{ (iteration.extract_claims.result\
      \ | from_json).total_claims }}\n- Claims with references: {{ (iteration.extract_claims.result\
      \ | from_json).claims_with_references }}\n- Percentage referenced: {{ (iteration.extract_claims.result\
      \ | from_json).percentage_referenced }}%\n- New citations added: {{ iteration.find_citations.result\
      \ | length | default(0) }}\n{% endfor %}\n\n## Final Status\n{% if fact_check_loop.iterations\
      \ and (fact_check_loop.iterations[-1].extract_claims.result | from_json).percentage_referenced\
      \ >= parameters.quality_threshold * 100 %}\n\u2705 **Quality threshold met**:\
      \ All or most claims now have proper references.\n{% else %}\n\u26A0\uFE0F **Maximum\
      \ iterations reached**: Some claims may still lack references.\n{% endif %}\n\
      \n## Output Files\n- Verified document: `{{ parameters.input_document | basename\
      \ | regex_replace('\\\\.md$', '') }}_verified.md`\n- Iteration documents: `iteration_*_document.md`\n\
      \n---\n*Generated by Iterative Fact Checker Pipeline v2.0*\n"
  dependencies:
  - save_final_document
outputs:
  verified_document: '{{ save_final_document.path }}'
  report: '{{ generate_report.path }}'
  iterations_performed: '{{ fact_check_loop.iteration_count | default(0) }}'
  final_quality: '{% if fact_check_loop.iterations %}{{ (fact_check_loop.iterations[-1].extract_claims.result
    | from_json).percentage_referenced }}%{% else %}N/A{% endif %}'
metadata:
  version: 2.0.0
  compatibility: 1.0.0
  migration_notes: Enhanced with new architecture features while maintaining backward
    compatibility
inputs:
  input_document:
    type: string
    default: *id001
    description: 'Parameter: input_document'
    required: false
  quality_threshold:
    type: string
    default: *id002
    description: 'Parameter: quality_threshold'
    required: false
  max_iterations:
    type: string
    default: *id003
    description: 'Parameter: max_iterations'
    required: false
enhanced_outputs:
  verified_document:
    description: 'Enhanced output: verified_document'
    value: '{{ save_final_document.path }}'
    type: auto-detect
  report:
    description: 'Enhanced output: report'
    value: '{{ generate_report.path }}'
    type: auto-detect
  iterations_performed:
    description: 'Enhanced output: iterations_performed'
    value: '{{ fact_check_loop.iteration_count | default(0) }}'
    type: auto-detect
  final_quality:
    description: 'Enhanced output: final_quality'
    value: '{% if fact_check_loop.iterations %}{{ (fact_check_loop.iterations[-1].extract_claims.result
      | from_json).percentage_referenced }}%{% else %}N/A{% endif %}'
    type: auto-detect
