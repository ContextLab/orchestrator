# Dynamic Flow Control Example
# Demonstrates goto and dynamic dependencies with AUTO resolution
name: Error Handling Pipeline
description: Dynamic flow control based on error conditions
version: "1.0.0"

parameters:
  operation:
    type: string
    description: Operation to perform
  retry_limit:
    type: integer
    default: 3

steps:
  # Initial validation
  - id: validate_input
    action: validation
    parameters:
      data: "{{ operation }}"
      validation_type: "operation_check"
      
  # Determine operation risk level
  - id: assess_risk
    action: task-delegation
    parameters:
      task: <AUTO>Assess the risk level of operation '{{ operation }}': low, medium, or high</AUTO>
    depends_on: [validate_input]
    
  # Dynamic dependency based on risk
  - id: prepare_operation
    action: data-processing
    parameters:
      action: prepare
      operation: "{{ operation }}"
      safety_level: "{{ assess_risk.result }}"
    depends_on: <AUTO>Based on risk level {{ assess_risk.result }}, should we depend on 'validate_input' only or also add 'safety_check'?</AUTO>
    
  # Optional safety check (created dynamically)
  - id: safety_check
    action: validation
    if: "{{ assess_risk.result == 'high' }}"
    parameters:
      validation_type: "safety"
      operation: "{{ operation }}"
    depends_on: [assess_risk]
    
  # Execute operation
  - id: execute_operation
    action: terminal
    parameters:
      command: "{{ operation }}"
      safe_mode: "{{ assess_risk.result != 'low' }}"
    depends_on: [prepare_operation]
    
  # Check execution result
  - id: check_result
    action: validation
    parameters:
      data: "{{ execute_operation.result }}"
      expected_status: "success"
    depends_on: [execute_operation]
    
  # Dynamic flow control based on result
  - id: handle_result
    action: task-delegation
    parameters:
      task: "Process execution result"
      result: "{{ check_result.result }}"
    goto: <AUTO>Based on execution result {{ check_result.result }}, which handler should we jump to: 'success_handler', 'retry_handler', or 'failure_handler'?</AUTO>
    depends_on: [check_result]
    
  # Retry handler
  - id: retry_handler
    action: data-processing
    parameters:
      action: prepare_retry
      attempt: "{{ (metadata.retry_count | default(0)) + 1 }}"
      max_attempts: "{{ retry_limit }}"
    goto: "{{ metadata.retry_count < retry_limit ? 'execute_operation' : 'failure_handler' }}"
    
  # Success handler
  - id: success_handler
    action: report-generator
    parameters:
      title: "Operation Successful"
      content: |
        ## Success Report
        - Operation: {{ operation }}
        - Risk Level: {{ assess_risk.result }}
        - Execution Time: {{ execute_operation.execution_time }}
        - Result: {{ execute_operation.result }}
    goto: "cleanup"
    
  # Failure handler
  - id: failure_handler
    action: report-generator
    parameters:
      title: "Operation Failed"
      content: |
        ## Failure Report
        - Operation: {{ operation }}
        - Risk Level: {{ assess_risk.result }}
        - Error: {{ check_result.error | default('Unknown error') }}
        - Retry Attempts: {{ metadata.retry_count | default(0) }}
    goto: "cleanup"
    
  # Cleanup (always executed)
  - id: cleanup
    action: data-processing
    parameters:
      action: cleanup
      operation_id: "{{ execute_operation.id }}"
      status: "{{ check_result.result.status }}"

outputs:
  operation_status: "{{ check_result.result.status }}"
  risk_level: "{{ assess_risk.result }}"
  retry_count: "{{ metadata.retry_count | default(0) }}"
  final_report: "{{ success_handler.report or failure_handler.report }}"