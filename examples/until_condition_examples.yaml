id: until_condition_examples
name: "Until Condition Examples"
description: |
  Real-world examples of until conditions based on the research pipeline patterns.
  These demonstrate sequential loop processing with until conditions for
  quality verification, source validation, and error recovery scenarios.

inputs:
  - search_topic: 
      type: string
      default: "artificial intelligence research"
  - quality_threshold:
      type: float
      default: 0.8

outputs:
  - verified_sources: "{{ verify_sources_sequential.result }}"
  - quality_report: "{{ quality_improvement_loop.result }}"
  - final_pdf: "{{ pdf_generation_with_recovery.result }}"

steps:
  # Example 1: Sequential source verification with until condition
  # Based on research pipeline quality-check-compilation pattern
  - id: verify_sources_sequential
    name: "Sequential Source Verification"
    for_each: ["https://example.com/ai-research", "https://arxiv.org/invalid-link", "https://en.wikipedia.org/wiki/Artificial_intelligence"]
    steps:
      - id: check_source
        action: web_request
        parameters:
          url: "{{ $item }}"
          method: "HEAD"
          timeout: 10
        produces: source_status
        
      - id: validate_source
        action: evaluate_condition
        parameters:
          condition: "{{ check_source.status_code }} == 200"
        produces: is_valid
        
      - id: log_result
        action: log_message  
        parameters:
          message: "Source {{ $item }} validation: {{ validate_source.result }}"
          
    # Until condition: stop when current source is verified or marked invalid
    until: "{{ validate_source.result }} == true or {{ validate_source.result }} == false"
    metadata:
      description: "Verify each source individually until validation complete"

  # Example 2: Quality improvement loop with until condition
  # Based on research pipeline iterative refinement pattern
  - id: quality_improvement_loop
    name: "Content Quality Improvement"
    while: "{{ $iteration }} < 5"  # Safety limit
    until: "{{ current_quality }} >= {{ quality_threshold }}"
    steps:
      - id: generate_content
        action: llm_call
        parameters:
          model: "anthropic/claude-sonnet-4-20250514"
          prompt: |
            Improve this content about {{ search_topic }}:
            Previous content: {{ previous_content | default('Initial research topic: ' + search_topic) }}
            Current quality score: {{ current_quality | default(0.3) }}
            
            Make it more comprehensive and accurate.
          temperature: 0.3
        produces: improved_content
        
      - id: evaluate_quality
        action: llm_call
        parameters:
          model: "anthropic/claude-sonnet-4-20250514"
          prompt: |
            Rate the quality of this content about {{ search_topic }} on a scale of 0-1:
            {{ generate_content.result }}
            
            Consider accuracy, completeness, and clarity.
            Return only a decimal number between 0 and 1.
          temperature: 0
        produces: quality_score
        
      - id: update_variables
        action: set_variables
        parameters:
          previous_content: "{{ generate_content.result }}"
          current_quality: "{{ evaluate_quality.result | float }}"
    
    metadata:
      description: "Iteratively improve content until quality threshold reached"

  # Example 3: PDF generation with error recovery
  # Based on research pipeline debug-compilation pattern  
  - id: pdf_generation_with_recovery
    name: "PDF Generation with Error Recovery"
    while: "{{ $iteration }} < 3"  # Max 3 attempts
    until: "{{ pdf_exists }} == true and {{ pdf_valid }} == true"
    steps:
      - id: generate_markdown
        action: create_file
        parameters:
          path: "/tmp/research_report.md"
          content: |
            # Research Report: {{ search_topic }}
            
            {{ quality_improvement_loop.improved_content | default('Research content here') }}
            
            ## Sources
            {% for source in verify_sources_sequential.verified_sources %}
            - {{ source }}
            {% endfor %}
        produces: markdown_file
        
      - id: compile_pdf
        action: shell_command
        parameters:
          command: "pandoc /tmp/research_report.md -o /tmp/research_report.pdf"
          timeout: 30
        produces: compile_result
        on_error: continue
        
      - id: check_pdf_exists
        action: file_exists
        parameters:
          path: "/tmp/research_report.pdf"
        produces: pdf_exists
        
      - id: validate_pdf
        action: shell_command
        parameters:
          command: "file /tmp/research_report.pdf | grep -q 'PDF document'"
          timeout: 5
        produces: pdf_valid_check
        on_error: continue
        
      - id: set_pdf_valid
        action: set_variables
        parameters:
          pdf_valid: "{{ validate_pdf.exit_code == 0 }}"
          
      - id: debug_on_failure
        action: log_message
        parameters:
          message: |
            PDF generation attempt {{ $iteration }}:
            - PDF exists: {{ check_pdf_exists.result }}
            - PDF valid: {{ set_pdf_valid.pdf_valid }}
            - Compile result: {{ compile_pdf.result }}
        condition: "{{ pdf_exists }} == false or {{ pdf_valid }} == false"
    
    metadata:
      description: "Generate PDF with automatic error recovery and validation"

  # Example 4: Simple counter-based until condition
  - id: counter_example
    name: "Counter Until Example"
    while: "true"  # Always continue while condition
    until: "{{ counter }} >= 3"  # Stop when counter reaches 3
    steps:
      - id: increment_counter
        action: evaluate_condition
        parameters:
          condition: "{{ counter | default(0) | int + 1 }}"
        produces: new_counter
        
      - id: update_counter
        action: set_variables
        parameters:
          counter: "{{ increment_counter.result }}"
          
      - id: log_counter
        action: log_message
        parameters:
          message: "Counter is now: {{ update_counter.counter }}"
    
    metadata:
      description: "Simple counter that stops when reaching 3"

  # Example 5: Until condition with step result references
  - id: process_items_until_complete
    name: "Process Items Until Complete"
    for_each: [1, 2, 3, 4, 5]
    steps:
      - id: process_item
        action: evaluate_condition
        parameters:
          condition: "{{ $item }} * 2"
        produces: processed_value
        
      - id: check_threshold
        action: evaluate_condition  
        parameters:
          condition: "{{ process_item.result }} >= 6"
        produces: threshold_met
        
    # Until condition referencing step results
    until: "{{ check_threshold.result }} == true"
    metadata:
      description: "Process items until processed value >= 6"