# MCP Integration Pipeline
# Demonstrates using MCP servers for DuckDuckGo search
id: mcp_integration
name: MCP Integration Pipeline
description: Connect to MCP servers and utilize their capabilities
version: "1.0.0"

parameters:
  search_query:
    type: string
    default: "AI orchestration frameworks"

steps:
  # Connect to MCP server
  - id: connect_mcp
    tool: mcp-server
    action: execute
    parameters:
      action: "connect"
      server_name: "duckduckgo-search"
      server_config:
        command: "python"
        args: ["src/orchestrator/tools/mcp_servers/duckduckgo_server.py"]
        env: {}
    
  # List available tools
  - id: list_tools
    tool: mcp-server
    action: execute
    parameters:
      action: "list_tools"
      server_name: "duckduckgo-search"
    dependencies:
      - connect_mcp
    
  # Store search context in memory
  - id: store_context
    tool: mcp-memory
    action: execute
    parameters:
      action: "store"
      namespace: "search_session"
      key: "query"
      value: "{{ parameters.search_query }}"
      ttl: 3600  # 1 hour
    dependencies:
      - connect_mcp
    
  # Execute search using MCP tool
  - id: search_web
    tool: mcp-server
    action: execute
    parameters:
      action: "execute_tool"
      server_name: "duckduckgo-search"
      tool_name: "search"
      tool_params:
        query: "{{ parameters.search_query }}"
        max_results: 5
    dependencies:
      - list_tools
    
  # Store search results in memory
  - id: store_results
    tool: mcp-memory
    action: execute
    parameters:
      action: "store"
      namespace: "search_session"
      key: "results"
      value: "{{ search_web.result }}"
      ttl: 3600
    dependencies:
      - search_web
    
  # List memory contents
  - id: list_memory
    tool: mcp-memory
    action: execute
    parameters:
      action: "list"
      namespace: "search_session"
    dependencies:
      - store_results
    
  # Save search results to file
  - id: save_results
    tool: filesystem
    action: write
    parameters:
      path: "examples/outputs/mcp_integration/{{ parameters.search_query[:25] | slugify }}_results.json"
      content: "{{ {'query': parameters.search_query, 'timestamp': execution.timestamp, 'results': search_web.result.results if search_web.result else [], 'total': search_web.result.total if search_web.result else 0, 'memory_keys': list_memory.keys if list_memory.keys else []} | tojson(indent=2) }}"
    dependencies:
      - list_memory
    
  # Disconnect from server
  - id: disconnect_mcp
    tool: mcp-server
    action: execute
    parameters:
      action: "disconnect"
      server_name: "duckduckgo-search"
    dependencies:
      - save_results

outputs:
  connected: "{{ connect_mcp.connected }}"
  tools_available: "{{ list_tools.tools | length if list_tools.tools else 0 }}"
  search_results: "{{ search_web.result if search_web.result else {} }}"
  results_saved: "{{ save_results.success }}"
  output_file: "examples/outputs/mcp_integration/{{ parameters.search_query[:25] | slugify }}_results.json"