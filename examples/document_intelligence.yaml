name: "Document Intelligence"
description: "Multi-modal document processing with AI-powered extraction and analysis"

inputs:
  input_dir:
    type: string
    description: "Directory containing documents to process"
    required: true
  
  output_dir:
    type: string
    description: "Output directory for processed results"
    default: "./processed"
  
  enable_ocr:
    type: boolean
    description: "Enable OCR for scanned documents"
    default: true
  
  languages:
    type: list
    description: "Languages for OCR and processing"
    default: ["en"]
  
  custom_entities:
    type: list
    description: "Custom entity types to extract"
    default: []
  
  output_format:
    type: string
    description: "Output format (json, html, pdf)"
    default: "json"
  
  extract_tables:
    type: boolean
    description: "Extract and analyze tables"
    default: true
  
  build_knowledge_graph:
    type: boolean
    description: "Build knowledge graph from entities"
    default: true

steps:
  # Step 1: Discover documents in directory
  - id: discover_documents
    action: |
      scan directory for documents:
      Path: {{input_dir}}
      Find all documents with extensions:
      - PDF files
      - Word documents (docx, doc)
      - Excel files (xlsx, xls)
      - Images (png, jpg, jpeg, tiff)
      - Text files (txt, md)
      For each document collect:
      1. File path and name
      2. File size
      3. Creation/modification date
      4. File type
      5. Initial metadata
      Return document list with metadata
    timeout: 10.0
    
    tags: ["discovery", "files"]

  # Step 2: Classify document types
  - id: classify_documents
    action: |
      classify document type for {{loop_item.name}}:
      Analyze file: {{loop_item.path}}
      Determine:
      1. Document category (invoice, contract, report, form, etc.)
      2. Business function (finance, legal, HR, technical, etc.)
      3. Confidence score
      4. Key indicators used for classification
      5. Document language
      6. Estimated complexity
      Return classification with confidence
    depends_on: [discover_documents]
    tags: ["classification", "ml"]
    
  # Step 3: Extract text content
  - id: extract_text
    action: |
      <AUTO>extract text from document {{loop_item}}:
      Document type: {{loop_item.classification}}
      Extract:
      1. Full text content
      2. Page-by-page text
      3. Text formatting information
      4. Document layout structure
      5. Embedded metadata
      
      For scanned documents:
      - Apply OCR with language detection
      - Enhance image quality first
      - Preserve layout information
      
      Return extracted text with metadata</AUTO>
    depends_on: [classify_documents]
    tags: ["extraction", "ocr"]
    
  # Step 4: Analyze document structure
  - id: analyze_structure
    action: |
      <AUTO>analyze document structure:
      Text content: {{extract_text.result}}
      Identify:
      1. Headers and sections
      2. Paragraphs and body text
      3. Lists and bullet points
      4. Tables and their locations
      5. Figures and captions
      6. Footnotes and references
      7. Page breaks and formatting
      
      Create hierarchical structure map
      
      Return document structure analysis</AUTO>
    depends_on: [extract_text]
    tags: ["structure", "layout"]
    
  # Step 5: Extract tables
  - id: extract_tables
    action: |
      <AUTO>extract and parse tables:
      Document structure: {{analyze_structure.result}}
      For each table:
      1. Extract table structure (rows, columns)
      2. Identify headers
      3. Extract cell contents
      4. Preserve cell formatting
      5. Handle merged cells
      6. Clean and normalize data
      
      Return structured table data</AUTO>
    depends_on: [analyze_structure]
    condition: "{{analyze_structure.result.table_count}} > 0"
    tags: ["tables", "data"]
    
  # Step 6: Extract entities
  - id: extract_entities
    action: |
      <AUTO>extract named entities from text:
      Text content: {{extract_text.result}}
      Extract:
      1. Person names
      2. Organization names
      3. Locations
      4. Dates and times
      5. Money amounts
      6. Percentages
      7. Email addresses
      8. Phone numbers
      9. Account numbers
      10. Custom entity types
      
      For each entity include:
      - Entity text
      - Entity type
      - Context
      - Confidence score
      - Location in document
      
      Return entities with metadata</AUTO>
    depends_on: [extract_text]
    tags: ["entities", "nlp"]
    
  # Step 7: Detect PII
  - id: detect_pii
    action: |
      <AUTO>detect personally identifiable information:
      Text content: {{extract_text.result}}
      Detect:
      1. Social security numbers
      2. Credit card numbers
      3. Bank account numbers
      4. Driver's license numbers
      5. Passport numbers
      6. Medical record numbers
      7. Personal addresses
      8. Sensitive personal info
      
      For each finding:
      - PII type
      - Location in document
      - Risk level
      - Suggested redaction
      
      Return PII findings and compliance report</AUTO>
    depends_on: [extract_text]
    tags: ["pii", "compliance"]
    
  # Step 8: Analyze content
  - id: analyze_content
    action: |
      <AUTO>analyze document content and meaning:
      Text: {{extract_text.result}}
      Entities: {{extract_entities.result}}
      Analyze:
      1. Main topics and themes
      2. Key points and findings
      3. Sentiment and tone
      4. Writing style and complexity
      5. Important statements
      6. Action items mentioned
      7. Risks or concerns noted
      
      Return comprehensive content analysis</AUTO>
    depends_on: [extract_entities]
    tags: ["analysis", "insights"]
    
  # Step 9: Generate summary
  - id: generate_summary
    action: |
      <AUTO>generate document summary:
      Content analysis: {{analyze_content.result}}
      Create summary that:
      1. Captures main purpose
      2. Lists key findings
      3. Highlights important dates/amounts
      4. Notes critical information
      5. Includes relevant entities
      6. Maintains factual accuracy
      
      Length: Proportional to document size (max 500 words)
      Style: Executive summary
      
      Return summary with metadata</AUTO>
    depends_on: [analyze_content]
    tags: ["summary", "abstract"]
    
  # Step 10: Extract relationships
  - id: extract_relationships
    action: |
      <AUTO>extract entity relationships:
      Entities: {{extract_entities.result}}
      Content: {{analyze_content.result}}
      Find relationships:
      1. Person to organization
      2. Organization hierarchies
      3. Financial relationships
      4. Contractual relationships
      5. Timeline relationships
      6. Geographic relationships
      7. Ownership relationships
      
      Return relationship graph</AUTO>
    depends_on: [extract_entities, analyze_content]
    tags: ["relationships", "graph"]

  # Step 11: Build knowledge graph
  - id: build_knowledge_graph
    action: |
      construct knowledge graph:
      Entities: {{extract_entities.result}}
      Relationships: {{extract_relationships.result}}
      Document metadata: {{classify_documents.result}}
      Build graph with:
      1. Entity nodes with properties
      2. Relationship edges with types
      3. Document nodes
      4. Cross-document connections
      5. Temporal relationships
      6. Hierarchical structures
      Calculate:
      - Node centrality
      - Community detection
      - Important paths
      Return knowledge graph structure
    depends_on: [extract_relationships]
    condition: "{{build_knowledge_graph}} == true"
    tags: ["knowledge-graph", "network"]

  # Step 12: Generate cross-document insights
  - id: generate_insights
    action: |
      generate insights across all documents:
      Document analyses: {{analyze_content.result}}
      Knowledge graph: {{build_knowledge_graph.result}}
      Entity frequencies:
      Calculate from {{extract_entities.result}}
      Identify:
      1. Common themes across documents
      2. Trending topics over time
      3. Key entities and their importance
      4. Anomalies or outliers
      5. Missing information gaps
      6. Compliance risks
      7. Business opportunities
      8. Process improvements
      Return prioritized insights list
    depends_on: [analyze_content, build_knowledge_graph]
    tags: ["insights", "analytics"]

  # Step 13: Create compliance report
  - id: create_compliance_report
    action: |
      generate compliance and risk report:
      PII findings: {{detect_pii.result}}
      Document classifications: {{classify_documents.result}}
      Content analyses: {{analyze_content.result}}
      Report on:
      1. PII exposure summary
      2. Regulatory compliance status
      3. Data retention compliance
      4. Security classification
      5. Risk assessment
      6. Recommended actions
      Return compliance report
    depends_on: [detect_pii, analyze_content]
    tags: ["compliance", "reporting"]

  # Step 14: Generate final intelligence report
  - id: create_intelligence_report
    action: |
      compile comprehensive intelligence report:
      Include:
      1. Executive summary
      2. Document inventory ({{discover_documents.result.count}} documents)
      3. Classification breakdown
      4. Key entities summary
      5. Top insights ({{generate_insights.result}})
      6. Knowledge graph visualization
      7. Compliance summary
      8. Table data summary
      9. Recommendations
      Format: {{output_format}}
      Return complete intelligence report
    depends_on: [generate_insights, create_compliance_report]
    tags: ["reporting", "final"]

  # Step 15: Save outputs
  - id: save_outputs
    action: |
      save all outputs to {{output_dir}}:
      Save:
      1. Intelligence report ({{output_format}})
      2. Extracted text files
      3. Entity lists (CSV)
      4. Summaries (markdown)
      5. Knowledge graph (JSON and visualization)
      6. Compliance report (PDF)
      7. Table data (Excel)
      8. Processing log
      Organize in folder structure:
      - /reports
      - /extracted_text
      - /entities
      - /summaries
      - /data
      - /visualizations
      Return output locations
    depends_on: [create_intelligence_report]
    tags: ["output", "save"]

outputs:
  total_documents: "{{discover_documents.result.document_list|length}}"
  document_types: "{{classify_documents.result}}"
  total_entities: "{{extract_entities.result|sum}}"
  pii_documents: "{{detect_pii.result|length}}"
  key_insights: "{{generate_insights.result.top_5}}"
  knowledge_graph_nodes: "{{build_knowledge_graph.result.node_count}}"
  knowledge_graph_edges: "{{build_knowledge_graph.result.edge_count}}"
  compliance_status: "{{create_compliance_report.result.overall_status}}"
  report_location: "{{save_outputs.result.report_path}}"
  processing_time: "{{save_outputs.result.total_time}}"
  extraction_quality: "{{extract_text.result.avg_confidence}}"
  tables_extracted: "{{extract_tables.result|length}}"