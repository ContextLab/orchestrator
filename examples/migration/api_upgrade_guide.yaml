# API Upgrade Guide - Practical Migration Example
# Shows how to upgrade from old API patterns to new capabilities
# while maintaining 100% backward compatibility

id: api-upgrade-guide
name: "API Upgrade Guide: Old to New Patterns"
description: |
  Comprehensive guide showing how to migrate from older orchestrator patterns
  to new architecture capabilities. Every old pattern works unchanged, with
  optional enhancements available for adoption when ready.

# === SECTION 1: MODEL MANAGEMENT ===

# OLD MODEL PATTERN (Still Works Perfectly)
old_model_usage_examples:
  # 1. Basic model specification - unchanged
  - id: basic_model_example
    action: generate_text
    parameters:
      prompt: "Explain quantum computing"
      model: <AUTO>  # Still works exactly as before
      max_tokens: 200

  # 2. Simple model specification - unchanged  
  - id: simple_model_example
    action: generate_text
    parameters:
      prompt: "Write a poem about AI"
      model: "gpt-3.5-turbo"  # Direct model names still work
      temperature: 0.7

# NEW MODEL PATTERNS (Optional Enhancements)
enhanced_model_usage_examples:
  # 1. Enhanced AUTO with context
  - id: contextual_model_example
    action: generate_text
    parameters:
      prompt: "Explain quantum computing for beginners"
      model: <AUTO task="education" audience="beginner">Smart model selection</AUTO>
      max_tokens: 300

  # 2. Domain-specific model selection
  - id: domain_model_example
    action: generate_text
    parameters:
      prompt: "Analyze this research paper abstract"
      model: <AUTO domain="academic" task="analysis">Research-optimized model</AUTO>
      temperature: 0.3

  # 3. Quality-optimized selection
  - id: quality_model_example
    action: generate_text
    parameters:
      prompt: "Create a professional business proposal"
      model: <AUTO quality="premium" task="business_writing">High-quality model</AUTO>
      max_tokens: 1000

# === SECTION 2: PARAMETER AND INPUT MANAGEMENT ===

# OLD PARAMETER PATTERN (Still Works)
parameters:
  topic: "artificial intelligence"
  format: "json"
  depth: "comprehensive"

# NEW ENHANCED INPUT PATTERN (Optional)
inputs:
  analysis_topic:
    type: string
    default: "machine learning"
    description: "Topic for detailed analysis"
    examples: ["machine learning", "quantum computing", "blockchain"]
  
  output_complexity:
    type: string
    choices: ["basic", "intermediate", "advanced"]
    default: "intermediate"
    description: "Complexity level for output"
  
  include_references:
    type: boolean
    default: true
    description: "Include academic references"
  
  max_processing_time:
    type: integer
    min: 60
    max: 3600
    default: 300
    description: "Maximum processing time in seconds"

# === SECTION 3: CONTROL FLOW EVOLUTION ===

steps:
  # OLD: Basic conditional (still works)
  - id: legacy_conditional
    action: generate_text
    condition: "{{ depth == 'comprehensive' }}"
    parameters:
      prompt: "Provide comprehensive analysis of {{ topic }}"
      model: <AUTO>

  # NEW: Enhanced conditional with multiple criteria
  - id: enhanced_conditional
    action: generate_text
    condition: "{{ inputs.output_complexity == 'advanced' and inputs.include_references }}"
    parameters:
      prompt: |
        Provide advanced analysis of {{ inputs.analysis_topic }}:
        - Include technical details
        - Add academic references
        - Use professional terminology
      model: <AUTO task="advanced_analysis">Advanced analysis model</AUTO>

  # OLD: Basic foreach (unchanged)
  - id: legacy_foreach
    action: generate_text
    foreach: ["topic1", "topic2", "topic3"]
    parameters:
      prompt: "Analyze {{ item }}"
      model: <AUTO>

  # NEW: Enhanced foreach with parallel processing
  - id: enhanced_foreach
    action: generate_text
    foreach: "{{ inputs.analysis_topic.split(',') if ',' in inputs.analysis_topic else [inputs.analysis_topic] }}"
    parallel: true
    max_concurrent: 2
    retry: 2
    on_failure: continue
    parameters:
      prompt: |
        Detailed analysis of {{ item.strip() }}:
        Complexity: {{ inputs.output_complexity }}
        Include refs: {{ inputs.include_references }}
      model: <AUTO task="parallel_analysis">Parallel processing model</AUTO>
      timeout: "{{ inputs.max_processing_time // 2 }}"

# === SECTION 4: ERROR HANDLING EVOLUTION ===

  # OLD: Basic error handling (still works)
  - id: legacy_error_handling
    tool: web-search
    action: search
    parameters:
      query: "{{ topic }}"
      max_results: 5
    # No explicit error handling - fails fast

  # NEW: Advanced error handling
  - id: enhanced_error_handling
    tool: web-search
    action: search
    parameters:
      query: "{{ inputs.analysis_topic }}"
      max_results: 10
    retry: 3
    timeout: 45
    on_failure: continue
    fallback_action: use_cached_results
    error_classification:
      - type: "rate_limit"
        action: "wait_and_retry"
        wait_time: 60
      - type: "timeout"
        action: "reduce_scope"
        fallback_params:
          max_results: 3

# === SECTION 5: OUTPUT MANAGEMENT EVOLUTION ===

# OLD: Simple outputs (still works)
outputs:
  result: "{{ legacy_conditional.result if legacy_conditional.result else 'No comprehensive analysis' }}"
  search_count: "{{ legacy_error_handling.results | length if legacy_error_handling.results else 0 }}"

# NEW: Enhanced outputs with metadata
enhanced_outputs:
  comprehensive_analysis:
    description: "Complete analysis with enhanced features"
    value: |
      # Analysis Report: {{ inputs.analysis_topic | title }}
      
      **Processing Configuration:**
      - Complexity: {{ inputs.output_complexity }}
      - References: {{ inputs.include_references }}
      - Max Time: {{ inputs.max_processing_time }}s
      
      ## Analysis Results
      {% if enhanced_conditional.result %}
      {{ enhanced_conditional.result }}
      {% else %}
      Standard analysis not performed (complexity: {{ inputs.output_complexity }})
      {% endif %}
      
      {% if enhanced_foreach.results %}
      ## Detailed Topic Analysis
      {% for result in enhanced_foreach.results %}
      ### {{ loop.index }}. {{ result.topic }}
      {{ result.result }}
      {% endfor %}
      {% endif %}
      
      ## Processing Summary
      - Legacy features used: {{ "✅" if legacy_conditional.result else "❌" }}
      - Enhanced features used: {{ "✅" if enhanced_conditional.result else "❌" }}
      - Parallel processing: {{ "✅" if enhanced_foreach.results else "❌" }}
      - Error resilience: {{ "✅" if enhanced_error_handling.status == "completed" else "Partial" }}
    type: "markdown"
  
  execution_metrics:
    description: "Pipeline execution performance metrics"
    value:
      processing_mode: |
        {%- if enhanced_conditional.result -%}enhanced
        {%- elif legacy_conditional.result -%}legacy
        {%- else -%}minimal
        {%- endif %}
      parallel_tasks_executed: "{{ enhanced_foreach.results | length if enhanced_foreach.results else 0 }}"
      error_recovery_used: "{{ enhanced_error_handling.status != 'failed' if enhanced_error_handling.status else false }}"
      total_processing_time: "{{ execution_time_seconds }}"
      model_selection_mode: "{{ 'contextual' if enhanced_conditional.result else 'basic' }}"
    type: "object"

# === SECTION 6: TOOL INTEGRATION EVOLUTION ===

  # OLD: Basic tool usage (unchanged)
  - id: legacy_tool_usage
    tool: filesystem
    action: write
    parameters:
      path: "legacy_output.txt"
      content: "{{ topic }}: {{ legacy_conditional.result }}"

  # NEW: Enhanced tool usage with error handling
  - id: enhanced_tool_usage
    tool: filesystem
    action: write_safe
    parameters:
      path: "enhanced_output_{{ inputs.analysis_topic | slugify }}.md"
      content: "{{ enhanced_outputs.comprehensive_analysis.value }}"
      backup: true
      create_directories: true
      encoding: "utf-8"
      permissions: "644"
    retry: 2
    on_failure: log_and_continue

# === SECTION 7: TEMPLATE ENGINE EVOLUTION ===

  # OLD: Basic templating (still works)
  - id: legacy_templating
    action: generate_text
    parameters:
      prompt: "Create summary for {{ topic }}"
      model: <AUTO>

  # NEW: Advanced templating with filters and functions
  - id: enhanced_templating
    action: generate_text
    parameters:
      prompt: |
        Create {{ inputs.output_complexity }} summary for {{ inputs.analysis_topic | title }}:
        
        Target length: {{ 
          {
            'basic': 200,
            'intermediate': 500,
            'advanced': 1000
          }[inputs.output_complexity] 
        }} words
        
        {% if inputs.include_references %}
        Include academic references and citations.
        {% endif %}
        
        Processing time limit: {{ inputs.max_processing_time | duration_format }}
        
        {% set complexity_instructions = {
          'basic': 'Use simple language and concepts',
          'intermediate': 'Balance accessibility with technical accuracy',
          'advanced': 'Include technical depth and nuanced analysis'
        } %}
        
        Style guide: {{ complexity_instructions[inputs.output_complexity] }}
      model: <AUTO task="templated_content" complexity="{{ inputs.output_complexity }}">Template-aware model</AUTO>

# === MIGRATION METADATA ===
migration_info:
  compatibility_status: "fully_backward_compatible"
  breaking_changes: []  # No breaking changes ever
  
  legacy_patterns_supported:
    - "Basic parameters"
    - "Simple steps and actions"
    - "Classic AUTO model selection"
    - "Basic conditionals and loops"
    - "Simple tool usage"
    - "Basic templating"
    - "Simple outputs"
  
  enhanced_patterns_available:
    - "Typed input definitions with validation"
    - "Contextual model selection"
    - "Parallel processing with controls"
    - "Advanced error handling and retry"
    - "Rich tool integrations"
    - "Advanced templating with filters"
    - "Structured outputs with metadata"
  
  migration_strategy:
    phase_1: "Run existing pipelines unchanged (0 effort)"
    phase_2: "Add enhanced inputs for better UX (low effort)"
    phase_3: "Upgrade model selection for better quality (medium effort)"
    phase_4: "Add parallel processing for performance (high effort)"
    
  upgrade_decision_tree:
    immediate_needs:
      performance: "Consider parallel processing enhancements"
      quality: "Upgrade to contextual model selection"
      reliability: "Add enhanced error handling"
      usability: "Implement typed input definitions"
    
    effort_assessment:
      zero_effort: "Continue using existing patterns (fully supported)"
      low_effort: "Add enhanced inputs and outputs"
      medium_effort: "Upgrade model selection and error handling"
      high_effort: "Implement parallel processing and advanced features"

# === PRACTICAL MIGRATION EXAMPLES ===

practical_examples:
  
  # Example 1: Zero-effort migration
  - name: "Zero Effort - Works Unchanged"
    before: |
      steps:
        - id: simple_task
          action: generate_text
          parameters:
            prompt: "Hello world"
            model: <AUTO>
    after: |
      # Exactly the same - no changes needed!
      steps:
        - id: simple_task
          action: generate_text
          parameters:
            prompt: "Hello world"
            model: <AUTO>
    migration_effort: "Zero"
    benefits: "Immediate compatibility"
  
  # Example 2: Low-effort enhancement  
  - name: "Low Effort - Add Input Validation"
    before: |
      parameters:
        name: "John"
        age: 25
    after: |
      # Original parameters still work, enhanced inputs optional
      parameters:
        name: "John"
        age: 25
      
      # Optional: Add enhanced inputs for better UX
      inputs:
        validated_name:
          type: string
          pattern: "^[A-Za-z\\s]+$"
          description: "Full name (letters and spaces only)"
        validated_age:
          type: integer
          min: 0
          max: 150
          description: "Age in years"
    migration_effort: "Low"
    benefits: "Better validation and documentation"
  
  # Example 3: Medium-effort enhancement
  - name: "Medium Effort - Contextual Model Selection"
    before: |
      parameters:
        model: <AUTO>
    after: |
      # Original AUTO still works
      model: <AUTO>
      
      # Optional: Add context for better selection
      enhanced_model: <AUTO task="analysis" domain="business">Business analysis model</AUTO>
    migration_effort: "Medium"
    benefits: "Better model selection and quality"

metadata:
  category: "migration"
  complexity: "comprehensive"
  estimated_runtime: "Varies by enhancement level"
  requirements: ["No additional requirements - all patterns supported"]
  
  use_cases:
    - "Understanding upgrade paths"
    - "Planning phased migrations"
    - "Evaluating enhancement benefits"
    - "Training on new features"
  
  demonstrates:
    - "100% backward compatibility"
    - "Optional enhancement patterns"
    - "Migration decision frameworks"
    - "Effort vs. benefit analysis"
    - "Practical upgrade examples"