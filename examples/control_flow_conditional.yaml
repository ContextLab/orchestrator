id: control-flow-conditional
# Conditional Execution Example
# Demonstrates simple conditional branching
name: Conditional File Processing
description: Process files differently based on their size
version: "1.0.0"

parameters:
  input_file:
    type: string
    default: "data/sample.txt"
    description: File to process
  size_threshold:
    type: integer
    default: 1000
    description: Size threshold in bytes
    
steps:
  # Read the input file
  - id: read_file
    tool: filesystem
    action: read
    parameters:
      path: "{{ input_file }}"
      
  # Check file size
  - id: check_size
    action: echo
    parameters:
      message: "File size is {{ read_file.size }} bytes"
    dependencies:
      - read_file
    
  # Process large files (compress)
  - id: compress_large
    action: generate_text
    if: "{{ read_file.size > size_threshold }}"
    parameters:
      prompt: "Summarize this text in 3 bullet points:\n\n{{ read_file.content }}"
      model: <AUTO task="summarize">Select a model for text summarization</AUTO>
      max_tokens: 200
    dependencies:
      - check_size
    
  # Process small files (expand)
  - id: expand_small
    action: generate_text
    if: "{{ read_file.size <= size_threshold }}"
    parameters:
      prompt: "Expand on this text with more details:\n\n{{ read_file.content }}"
      model: <AUTO task="generate">Select a model for text generation</AUTO>
      max_tokens: 500
    dependencies:
      - check_size
    
  # Save the result
  - id: save_result
    tool: filesystem
    action: write
    parameters:
      path: "output/processed_{{ input_file | basename }}"
      content: |
        # Processed File
        
        Original size: {{ read_file.size }} bytes
        Processing type: {{ read_file.size > size_threshold ? 'Compressed' : 'Expanded' }}
        
        ## Result
        {{ compress_large.result | default(expand_small.result) }}
    dependencies:
      - compress_large
      - expand_small
      
outputs:
  original_size: "{{ read_file.size }}"
  processed_content: "{{ compress_large.result | default(expand_small.result) }}"
  output_file: "{{ save_result.filepath }}"