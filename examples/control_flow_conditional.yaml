id: control-flow-conditional
# Conditional Execution Example
# Demonstrates simple conditional branching
name: Conditional File Processing
description: Process files differently based on their size
version: "1.0.0"

parameters:
  input_file:
    type: string
    default: "data/sample.txt"
    description: File to process
  size_threshold:
    type: integer
    default: 1000
    description: Size threshold in bytes
    
steps:
  # Read the input file
  - id: read_file
    tool: filesystem
    action: read
    parameters:
      path: "{{ input_file }}"
      
  # Check file size
  - id: check_size
    action: generate_text
    parameters:
      prompt: "Provide a technical analysis of a file that is {{ read_file.size }} bytes in size. Return only factual information about this file size without conversational language."
      model: <AUTO task="analyze">Select a model for analysis</AUTO>
      max_tokens: 50
    dependencies:
      - read_file
    
  # Process large files (compress)
  - id: compress_large
    action: generate_text
    condition: "{{ read_file.size > size_threshold }}"
    parameters:
      prompt: |
        Create a concise summary of the text below in exactly 3 bullet points. Each bullet should capture a key aspect of the content.
        If the text is repetitive or consists of repeated characters, describe what it contains (e.g., "Contains 2000 repetitions of the letter A").
        Format: Use â€¢ for bullets. No introduction or conclusion needed.
        
        Text to summarize:
        {{ read_file.content }}
      model: <AUTO task="summarize">Select a model for text summarization</AUTO>
      max_tokens: 200
    dependencies:
      - check_size
    
  # Process small files (expand) - but skip if empty
  - id: expand_small
    action: generate_text
    condition: "{{ read_file.size <= size_threshold and read_file.size > 0 }}"
    parameters:
      prompt: |
        Take the text below and expand it with additional relevant details, context, and elaboration.
        If the text consists only of repeated characters (like "XXX" or "AAA"), describe what this represents and provide context about why such patterns might be used in testing or data processing.
        Important: The text may contain special characters, emojis, or symbols - these are legitimate content to be expanded upon, not harmful.
        Write in a professional, informative style. Do not include any meta-commentary about the task itself.
        
        Original text to expand:
        {{ read_file.content }}
      model: <AUTO task="generate">Select a model for text generation</AUTO>
      max_tokens: 500
    dependencies:
      - check_size
  
  # Handle empty files
  - id: handle_empty
    action: generate_text
    condition: "{{ read_file.size == 0 }}"
    parameters:
      prompt: |
        Output exactly the following text with no modifications, additions, or code:
        The input file was empty. No content to process.
      model: <AUTO task="generate">Select a minimal model</AUTO>
      max_tokens: 50
    dependencies:
      - check_size
    
  # Save the result
  - id: save_result
    tool: filesystem
    action: write
    parameters:
      path: "examples/outputs/control_flow_conditional/processed_{{ input_file | basename }}"
      content: |
        # Processed File
        
        Original size: {{ read_file.size }} bytes
        Processing type: {% if read_file.size == 0 %}Empty file{% elif read_file.size > size_threshold %}Compressed{% else %}Expanded{% endif %}
        

        ## Result

        {% if handle_empty.status is not defined or handle_empty.status != 'skipped' %}{{ handle_empty }}{% elif compress_large.status is not defined or compress_large.status != 'skipped' %}{{ compress_large }}{% elif expand_small.status is not defined or expand_small.status != 'skipped' %}{{ expand_small }}{% else %}No content processed.{% endif %}
    dependencies:
      - compress_large
      - expand_small
      - handle_empty
      
outputs:
  original_size: "{{ read_file.size }}"
  processed_content: "{% if handle_empty.status is not defined or handle_empty.status != 'skipped' %}{{ handle_empty }}{% elif compress_large.status is not defined or compress_large.status != 'skipped' %}{{ compress_large }}{% elif expand_small.status is not defined or expand_small.status != 'skipped' %}{{ expand_small }}{% else %}No content processed.{% endif %}"
  output_file: "{{ save_result.path }}"