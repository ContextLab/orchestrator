name: test_timeout_pipeline
description: Test pipeline for timeout functionality
version: 1.0.0

# Global pipeline configuration
metadata:
  # Default timeout for all tasks (in seconds)
  default_timeout: 30

inputs:
  delay_seconds:
    type: integer
    default: 5
    description: How long the tasks should sleep

# Pipeline steps with various timeout configurations
steps:
  - id: quick_task
    tool: python-executor
    action: execute
    parameters:
      code: |
        import time
        print("Quick task starting...")
        time.sleep(2)
        print("Quick task completed!")
        return {"status": "completed", "duration": 2}
    # No timeout specified - will use default_timeout from config
    
  - id: normal_task
    tool: python-executor
    action: execute
    parameters:
      code: |
        import time
        delay = {{ delay_seconds }}
        print(f"Normal task starting, sleeping for {delay} seconds...")
        time.sleep(delay)
        print("Normal task completed!")
        return {"status": "completed", "duration": delay}
    timeout: 60  # Task-specific timeout
    
  - id: timeout_task
    tool: python-executor
    action: execute
    parameters:
      code: |
        import time
        print("This task will timeout...")
        time.sleep(20)  # Will exceed the 10 second timeout
        print("This shouldn't print")
        return {"status": "completed"}
    timeout: 10  # This task should timeout
    metadata:
      on_error: continue  # Continue pipeline even if this task fails
    
  - id: long_running_task
    tool: python-executor
    action: execute
    parameters:
      code: |
        import time
        import asyncio
        
        print("Long running task starting...")
        for i in range(15):
          print(f"Progress: {i+1}/15")
          time.sleep(1)
        print("Long running task completed!")
        return {"status": "completed", "duration": 15}
    timeout: 120  # 2 minute timeout for long tasks
    metadata:
      description: Task with longer timeout for extended operations
    
  - id: web_search_with_timeout
    tool: web-search
    parameters:
      query: "latest AI developments 2025"
    timeout: 30  # Timeout for web operations
    metadata:
      description: Web search with reasonable timeout

outputs:
  quick_result: "{{ steps.quick_task }}"
  normal_result: "{{ steps.normal_task }}"
  timeout_result: "{{ steps.timeout_task }}"
  long_result: "{{ steps.long_running_task }}"
  search_result: "{{ steps.web_search_with_timeout.results[0].title if steps.web_search_with_timeout else 'No results' }}"