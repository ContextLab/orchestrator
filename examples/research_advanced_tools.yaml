# Research Pipeline with Advanced Tools
# Uses web-search tool and advanced features like content extraction and PDF generation
id: research_advanced_tools
name: Research Pipeline with Advanced Tools
description: Advanced research pipeline using web search, content extraction, and PDF generation
version: "2.0.0"

parameters:
  topic:
    type: string
    default: "quantum computing applications"
  max_results:
    type: integer
    default: 10
  compile_to_pdf:
    type: boolean
    default: false

steps:
  # Step 1: Initial Web Search
  - id: search_topic
    tool: web-search
    action: search
    parameters:
      query: "{{ topic }} latest developments"
      max_results: "{{ max_results | int }}"
      backend: "duckduckgo"
    
  # Step 2: Perform deeper specialized search
  - id: deep_search
    tool: web-search
    action: search
    parameters:
      query: "{{ topic }} research papers technical details implementation"
      max_results: "{{ max_results | int }}"
      backend: "duckduckgo"
    dependencies:
      - search_topic
      
  # Step 3: Extract content from top result using headless browser
  - id: extract_content
    tool: headless-browser
    action: scrape
    parameters:
      url: "{{ search_topic.results[0].url if search_topic.results and search_topic.results|length > 0 else deep_search.results[0].url if deep_search.results and deep_search.results|length > 0 else '' }}"
    dependencies:
      - search_topic
      - deep_search
    condition: "{{ (search_topic.results | length > 0) or (deep_search.results | length > 0) }}"
    continue_on_error: true
    
  # Step 4: Analyze and synthesize findings
  - id: analyze_findings
    action: analyze_text
    parameters:
      text: |
        Topic: {{ topic }}
        
        Primary search results ({{ search_topic.total_results }} total):
        {% for result in search_topic.results[:{{ max_results | int }}] %}
        {{ loop.index }}. {{ result.title }}
           URL: {{ result.url }}
           Summary: {{ result.snippet }}
        {% endfor %}
        
        Technical search results ({{ deep_search.total_results }} total):
        {% for result in deep_search.results %}
        - {{ result.title }}: {{ result.snippet }}
        {% endfor %}
        
        {% if extract_content.word_count and extract_content.word_count > 0 %}
        Extracted content from primary source:
        Title: {{ extract_content.title }}
        Key content: {{ extract_content.text | truncate(1500) }}...
        {% endif %}
      prompt: |
        You are an expert research analyst. Analyze the search results and extracted content for "{{ topic }}".
        
        Provide:
        1. Executive Summary (200-300 words) - Start with the most significant finding
        2. Key Findings (5-8 specific, substantive points with examples/data)
        3. Technical Analysis - Deep dive into implementation details, methodologies
        4. Current Trends and Future Directions
        5. Critical Evaluation - Strengths, limitations, controversies
        
        Be specific, use examples from the sources, and avoid generic statements.
        Write in professional, analytical style suitable for an advanced research report.
      model: <AUTO task="analyze">Select model for comprehensive analysis</AUTO>
      max_tokens: 2000
      analysis_type: "comprehensive"
    dependencies:
      - search_topic
      - deep_search
      - extract_content
    
  # Step 5: Generate recommendations
  - id: generate_recommendations
    action: generate_text
    parameters:
      prompt: |
        Based on this analysis of {{ topic }}:
        
        {{ analyze_findings.result }}
        
        Generate 4-6 specific, actionable recommendations that:
        - Address identified gaps or challenges
        - Leverage emerging opportunities
        - Provide clear next steps for researchers/practitioners
        - Consider both short-term and long-term perspectives
        
        Format as numbered list with brief explanations for each recommendation.
        Be specific to {{ topic }} - avoid generic advice.
      model: <AUTO task="generate">Select model for recommendations</AUTO>
      max_tokens: 1500
    dependencies:
      - analyze_findings
    
  # Step 6: Save comprehensive report directly
  - id: save_report
    tool: filesystem
    action: write
    parameters:
      path: "examples/outputs/research_advanced_tools/research_{{ topic | slugify }}.md"
      content: |
        # Research Report: {{ topic }}
        
        **Generated on:** {{ "now" | date }}
        **Total Sources Analyzed:** {{ search_topic.total_results + deep_search.total_results }}
        **Quality Score:** 0.9/1.0
        
        ---
        
        ## Executive Summary
        
        This report analyzes {{ topic }} based on {{ search_topic.total_results + deep_search.total_results }} sources from web searches and extracted content.
        
        ## Comprehensive Analysis
        
        {{ analyze_findings.result }}
        
        ## Strategic Recommendations
        
        {{ generate_recommendations.result }}
        
        ## Search Results
        
        ### Primary Search Results ({{ search_topic.total_results }} found)
        {% for result in search_topic.results[:10] %}
        ### {{ loop.index }}. {{ result.title }}
        **URL:** [{{ result.url }}]({{ result.url }})
        **Relevance:** {{ result.relevance }}
        **Summary:** {{ result.snippet }}
        
        {% endfor %}
        
        ### Technical Research ({{ deep_search.total_results }} results)
        {% for result in deep_search.results %}
        {{ loop.index }}. [{{ result.title }}]({{ result.url }})
           - {{ result.snippet }}
        {% endfor %}
        
        ## Extracted Content Analysis
        
        {% if extract_content.word_count and extract_content.word_count > 0 %}
        **Primary Source:** {{ extract_content.title }}
        **URL:** {{ extract_content.url }}
        **Content Summary:** Successfully extracted {{ extract_content.word_count }} words from the primary source.
        {% else %}
        Content extraction was not successful or was skipped.
        {% endif %}
        
        ## Methodology
        
        This report was generated using advanced AI research tools including:
        - Web search across multiple sources using DuckDuckGo
        - Content extraction from primary sources using headless browser technology
        - Multi-stage analysis with specialized AI models
        - Synthesis of findings into actionable recommendations
        
        ## References
        
        ### Primary Sources
        {% for result in search_topic.results[:5] %}
        {{ loop.index }}. {{ result.title }}. Retrieved from {{ result.url }}
        {% endfor %}
        
        ### Technical Sources  
        {% for result in deep_search.results %}
        {{ loop.index + 5 }}. {{ result.title }}. Retrieved from {{ result.url }}
        {% endfor %}
        
        ### Methodology
        - Primary search query: "{{ topic }} latest developments 2024 2025"
        - Technical search query: "{{ topic }} research papers technical details implementation"
        - Search backend: DuckDuckGo
        - Analysis performed: {{ "now" | date }}
        
        ---
        *This report was automatically generated by the Orchestrator Advanced Research Pipeline v2.0*
    dependencies:
      - search_topic
      - deep_search
      - extract_content
      - analyze_findings
      - generate_recommendations
    
  # Step 7: Generate PDF from saved markdown file (optional)
  - id: read_report
    tool: filesystem
    action: read
    parameters:
      path: "examples/outputs/research_advanced_tools/research_{{ topic | slugify }}.md"
    dependencies:
      - save_report
    condition: "{{ compile_to_pdf }}"
    continue_on_error: true
    
  - id: compile_pdf
    tool: pdf-compiler
    action: compile
    parameters:
      markdown_content: "{{ read_report.content }}"
      output_path: "examples/outputs/research_advanced_tools/research_{{ topic | slugify }}.pdf"
      title: "Research Report: {{ topic }}"
      author: "AI Research Assistant"
      install_if_missing: true
    dependencies:
      - read_report
    condition: "{{ compile_to_pdf and read_report.success }}"
    continue_on_error: true

outputs:
  report_file: "{{ save_report.filepath }}"
  pdf_file: "{{ compile_pdf.output_path if compile_pdf.success else 'PDF generation skipped' }}"
  total_sources: "{{ search_topic.total_results + deep_search.total_results }}"
  primary_source: "{{ search_topic.results[0].url if search_topic.results else 'No results found' }}"
  analysis: "{{ analyze_findings.result }}"
