id: model-routing-demo
# Model Routing Demonstration Pipeline
# Shows intelligent model selection and routing strategies

name: model-routing-demonstration
description: Demonstrates intelligent model routing capabilities
version: "1.0.0"

inputs:
  task_budget: 10.00  # Dollar budget for this pipeline
  priority: "balanced"  # cost, speed, or quality
  
steps:
  # Step 1: Analyze task complexity to route appropriately
  - id: assess_requirements
    tool: multi-model-routing
    action: route
    parameters:
      tasks:
        - task: "Summarize this document in 2-3 sentences"
          context: |
            Artificial intelligence continues to revolutionize industries worldwide.
            From healthcare to finance, AI applications are becoming increasingly sophisticated.
            Machine learning models can now process vast amounts of data in real-time,
            enabling predictive analytics and automated decision-making at unprecedented scales.
        - task: "Write a Python function to calculate fibonacci numbers"
          context: "Should be efficient and handle large inputs"
        - task: "Analyze sales data trends"
          context: "Q4 2024 sales data showing 15% growth"
      routing_strategy: "{{ priority }}"  # Maps to cost_optimized, balanced, or quality_optimized
      constraints:
        total_budget: "{{ task_budget }}"
        max_latency: 30.0
      
  # Step 2: Simple task with cheap model
  - id: summarize_document
    action: generate_text
    parameters:
      prompt: |
        Summarize this document in 2-3 sentences:
        
        Artificial intelligence continues to revolutionize industries worldwide.
        From healthcare to finance, AI applications are becoming increasingly sophisticated.
        Machine learning models can now process vast amounts of data in real-time,
        enabling predictive analytics and automated decision-making at unprecedented scales.
      # Use routing recommendation
      model: "{{ assess_requirements.recommendations[0].model }}"
    dependencies:
      - assess_requirements
      
  # Step 3: Complex task with specialized model
  - id: generate_code
    action: generate_text
    parameters:
      prompt: |
        Write a Python function to calculate fibonacci numbers.
        Requirements:
        - Should be efficient and handle large inputs
        - Include type hints
        - Add docstring
        - Handle edge cases
      # Use routing recommendation
      model: "{{ assess_requirements.recommendations[1].model }}"
    dependencies:
      - assess_requirements
      
  # Step 4: Data analysis with balanced model
  - id: analyze_data
    action: analyze_text
    parameters:
      text: |
        Q4 2024 Sales Report:
        - Total Revenue: $2.5M (15% growth YoY)
        - Units Sold: 15,000 (12% growth YoY)
        - Average Order Value: $167 (3% growth YoY)
        - Top Product Categories: Electronics (45%), Home & Garden (30%), Clothing (25%)
      analysis_type: "trends"
      prompt: "Analyze the sales data trends and provide 3 key insights"
      # Use routing recommendation
      model: "{{ assess_requirements.recommendations[2].model }}"
    dependencies:
      - assess_requirements
      
  # Step 5: Cost optimization demonstration
  - id: batch_processing
    tool: multi-model-routing
    action: optimize_batch
    parameters:
      tasks:
        - "Translate 'Hello World' to Spanish"
        - "Translate 'Good morning' to French"
        - "Translate 'Thank you' to German"
        - "Translate 'Goodbye' to Italian"
      optimization_goal: "minimize_cost"
      constraints:
        max_budget_per_task: 0.05
    dependencies:
      - analyze_data
      
  # Step 6: Generate routing report
  - id: routing_report
    tool: report-generator
    action: generate
    parameters:
      title: "Model Routing Analysis"
      format: "markdown"
      content: |
        # Model Routing Results
        
        ## Configuration
        - Budget: ${{ task_budget }}
        - Priority: {{ priority }}
        
        ## Task Routing
        
        ### Document Summary
        - Assigned Model: {{ assess_requirements.recommendations[0].model }}
        - Estimated Cost: ${{ assess_requirements.recommendations[0].estimated_cost }}
        - Result: {{ summarize_document.result }}
        
        ### Code Generation
        - Assigned Model: {{ assess_requirements.recommendations[1].model }}
        - Estimated Cost: ${{ assess_requirements.recommendations[1].estimated_cost }}
        - Result Preview: {{ generate_code.result | truncate(200) }}
        
        ### Data Analysis
        - Assigned Model: {{ assess_requirements.recommendations[2].model }}
        - Estimated Cost: ${{ assess_requirements.recommendations[2].estimated_cost }}
        - Insights: {{ analyze_data.result }}
        
        ## Batch Translation Optimization
        - Strategy: {{ batch_processing.strategy }}
        - Total Tasks: {{ batch_processing.task_count }}
        - Models Used: {{ batch_processing.models_used | join(', ') }}
        - Total Cost: ${{ batch_processing.total_cost }}
        - Average Cost per Task: ${{ batch_processing.average_cost }}
        
        ## Summary
        - Total Pipeline Cost: ${{ assess_requirements.total_estimated_cost + batch_processing.total_cost }}
        - Budget Remaining: ${{ task_budget - (assess_requirements.total_estimated_cost + batch_processing.total_cost) }}
        - Optimization Achieved: {{ priority }} routing successfully implemented
    dependencies:
      - batch_processing
      
  # Step 7: Save final report
  - id: save_report
    tool: filesystem
    action: write
    parameters:
      path: "outputs/model_routing_demo/report_{{ execution.timestamp | slugify }}.md"
      content: |
        # Model Routing Demo Report
        
        **Generated:** {{ execution.timestamp }}
        **Budget:** ${{ task_budget }}
        **Priority:** {{ priority }}
        
        ## Routing Results
        
        {{ routing_report.content }}
        
        ---
        *Generated by Model Routing Demonstration Pipeline*
    dependencies:
      - routing_report
      
outputs:
  routing_report: "{{ routing_report.content }}"
  total_cost: "{{ assess_requirements.total_estimated_cost + batch_processing.total_cost }}"
  models_used: "{{ assess_requirements.models_selected + batch_processing.models_used }}"
  report_path: "{{ save_report.filepath }}"