name: Model Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-huggingface-models:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install transformers torch requests
    
    - name: Test HuggingFace model integration
      env:
        CI: true
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        python tests/integration/test_models_comprehensive.py
    
    - name: Test pipeline with real models
      env:
        CI: true
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        cd examples
        timeout 300 python -c "
        import asyncio
        import sys
        import os
        sys.path.insert(0, os.path.join('.', '..', 'src'))
        
        from orchestrator.integrations.huggingface_model import HuggingFaceModel
        from orchestrator.compiler.ambiguity_resolver import AmbiguityResolver
        
        async def test():
            try:
                model = HuggingFaceModel('TinyLlama/TinyLlama-1.1B-Chat-v1.0')
                resolver = AmbiguityResolver(model=model)
                result = await resolver.resolve('Choose format: json or csv', 'test.format')
                print(f'✅ Resolved: {result}')
                return True
            except Exception as e:
                print(f'❌ Failed: {e}')
                return False
        
        success = asyncio.run(test())
        sys.exit(0 if success else 1)
        "

